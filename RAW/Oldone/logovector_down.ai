%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 22.1.0%%For: (sojin) ()%%Title: (logovector_down.ai)%%CreationDate: 2018. 9. 19. 오전 10:54%%Canvassize: 16383%%BoundingBox: 416 -942 2543 -497%%HiResBoundingBox: 416.7803 -941.2581 2543 -497.5182%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 1480.5 -720.5 1480.5 -720.5%AI3_TileBox: 1084 -1026 1876 -414%AI3_DocumentPreview: None%AI5_ArtSize: 2960 1440%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -116 310 0.37 1185 752 18 0 0 90 138 0 0%AI5_OpenViewLayers: 7%%PageOrigin:1392 -824%AI7_GridSettings: 5.66929 8 5.66929 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 28 8%%BeginData: 6322 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0DFF7D0500270027A8FD0EFFA8F8270027F8A8FD64FF7EF805F8%2700A8FD0EFF7E00F827F8007DFD64FF7D270027F827A8FD0EFFA80027F8%2700A8FD64FF7DF827F800F8A8FD0EFF7D00F800F8007DFD64FF7D270027%F827A8FD0EFFA80027002700A8FD64FF7DF827F800F8A9FD0EFF7D27F827%F8277EFD64FF7D00F8270027A8FD0EFFA8F8270027F8A8FD64FF7DF800F8%05F8A8FD0EFF7D00F827F8007DFD5DFFA87D7D7DA8FFFF7D0000270027A8%FD07FFA8A87D7EA8FFFFA8F8270027F8A8FD20FFA8FD09FFA8A87DA8A8FD%09FF84A87DA8A8FD11FFA87E7D7EA8FD08FF5227F8F8F800F8277D7EF800%F82700A8FD05FF7D2700F800F800007D7D05F827F8007DFF7D0000270027%7DFD05FF7D0000270027A8FF7D0000270027A8FF7D52F827F8A8FD04FFA8%520500F800F8000053A8FFFFFF7D28F800F800F827277DFD06FF7D000027%0027A87D2700F800F80027A8FD05FF2700F8270027F827F80027270027F8%27A8FD04FF52F8270027F8270027F8270027F82700A8FFA8F827F827F8A8%FD05FF7DF827F82700FFFF7DF827F82700FF7D00F827F827A8FFFFFF7D27%F8270027F8270027F8277DFF2800F827F8270027F827F828A8FD04FFA8F8%27F8270052F8270027F8270000F8A8FFFFFF00F8F800F827F800F827F800%F827F800F8A8FFFFA828F800F827F800F827F800F827F800F8007DFF7D00%F800F8007DFD05FF52F8F800F827A8FF52F8F800F8275200F827F800F8A8%FFFF52F8F805F827F800F827F800F800F8F8F827F800F827F800F827F827%A8FFFFFF7D00F800F827F800F827F800F827F8F800FFFF520000270027F8%00F827F82700270027F827A8FFFF7DF82700270027F827F8270027002700%2700A8FFA8F827002700A8FD05FF7DF827002700FFFF7DF8270027002700%270027F827A8FF7D0000270027F800F827F8270027002700270027F827F8%00F8270027F828FFFFFFA8F827002700270027F8000027002700007DA800%F827F805F8527DA87D28F827F827F800F8A9FFA8F827F827F800277D7D7D%2700F827F827F8277EFF7D00F827F8277EFD05FF5200F827F827A8FF5200%F827F827F827F800F8F8F8FFA827F827F805F8287DA87D28F827F827F827%F827F8527DA85200F827F827F87DFFFF7D00F827F827F800277D5200F827%F827F82859F827F827F87DFD05FF52F827F8270027A8FF7D00F827000052%FD05FF5200F8270027F8A8FF7EF8270027F8A8FD05FF7DF827002700FFFF%7DF8270027F8270000277D7D7DFF7DF827F827F852FD05FF52F827F82700%27F8A8FD04FFA827F827002700FFFF7EF8270027F8277DFFFFFF7D27F827%0027F82700F800F827FD06FFA827F800F805F8A8FF52F800F80000FD07FF%2700F827F8007DFF7DF8F827F8007DFD05FF53F8F827F827A8FF53F8F827%F805F8277DFD05FF2700F800F828FD06FFA827F800F827F87DFD06FF7DF8%F827F8007DFF7DF8F827F8F828FD05FF28F8F827F80027002700007DFD07%FF530000270027A8FF27270027F853FD07FF7DF8270027F8A8FFA8F82700%27F8A8FD05FF7DF827002700FFFF7DF827002700277EFD06FF2800270005%7DFD07FF530000270027A8FD07FF27270027F87DFFA8F8270027F8A8FD05%FF7DF827002700F827F805F87EFD07FF7EF805F82700A8FF27F827F8007D%FD07FF7D00F827F8007DFF7D00F827F8007DFD05FF7DF8F827F827A8FF53%F8F827F8F828FD07FF0027F800F8A8FD07FF7DF805F82705FD08FF28F827%F8F852FF7D00F827F8007DFD05FF53F8F827F82727002700007DFD07FF7D%000027F827A8FF27270027F87DFD07FFA8F827F82700A8FFA8F827F82700%A8FD05FF7DF827F82700FFFF7DF827F827F8A8FD07FF27F82700007DFD07%FF59000027F827FD08FF2727F827F87DFFA8F827F82700A8FD05FF7DF827%F827000000F827F852FD07FF52F827F800F8A9FF28F827F80027FD07FF28%00F800F8007DFF7D00F800F8007DFD05FF2700F800F827A8FF52F8F800F8%27A8FD07FF2700F827F852FD07FF28F827F800F8A8FD06FF7E00F800F800%7DFF7D00F800F827A8FD05FF52F8F800F82752F8270027F8A8FD05FF7DF8%270027F827A8FF5200002700277DFD05FF7D270027002700A8FFA8F82700%27F852FD04FF7D270027002700FFFF7DF827002700FD08FF7DF8270027F8%A8FD05FF7DF8270027002727FD06FF52F827002700FFFFA8F827002700FD%06FF7DF8270027007DF8F827F800F87DA8FFA87DF800F827F800F8A9FFA8%F827F827F80052A9A9FF5300F827F827F8277EFFA827F827F827F8527DA8%5200F827F827F827A8FF5200F827F827A8FD07FFA800F827F800F87DA8FF%A87DF800F827F827F80027A8A8FF7E28F827F827F852FFFF7D00F827F827%A8FD05FF5200F827F827FF270000270027F8272727F8270027F8270027A8%FFFF52F8270027F827002700050027F8270027F8A8FFFF27270027F827F8%00F8000027F827002700FFFF7DF827002700FD09FF520000270027F82727%27F8270027F82700270027F8270027F827F8270027A8FFFF7EF827002700%FD06FF7DF8270027F8FFA8F800F827F800F800F800F827F800F805F8A8FF%FFA800F827F800F805F800F827F800F827F8007DFFFF7DF827F800F827F8%00F827F800F827F827A8FF53F8F827F827A8FD09FF27F8F827F800F800F8%00F827F800F800F800F827F800F827F805F8F853FFFFFF7DF8F827F827A8%FD05FF53F8F827F800FFFFA8F8270027002700270027002700270027A8FF%FFFFA827F827002700270027F82700270027F8A8FFFFFF52F82700270027%0027F827F827002700FFFF7DF827002700FD0BFF27000027002700270027%0000527E0000F827002700270027F8277DFD04FFA8F827002700FD06FF7D%F827002700FFFFFFA82700F800F800F800287DF800F800F8A8FD04FFA852%F8F8F800F8F8F8525300F827F8007DFD04FF52F8F8F800F8F8F87D52F8F8%27F800A8FF53F8F827F800A8FD0BFF5227F8F8F800F8F8F8277DFFFFA828%00F800F800F800F8287EFD05FF7DF8F827F800A8FD05FF53F8F827F800FD%05FF7D7D5252527DA8FFFFA8A8A87EA8FD07FFA85252285252A8FFFFA8A8%7EA8A8FD06FFA8525228527DA8FFFF7EA87EA8A8FFFFFFA8A87EA8A8FD0D%FFA8A85252285252A8A8FD05FFA87DFD04527DA8FD08FFA8A87EA8A8FD07%FFA8A87EA8A8FD7FFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Line Plugin Group) (Line artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Sketch Plugin Group) (Sketch artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp10 Bn%AI5_BeginGradient: (Fade To Center Green)(Fade To Center Green) 0 3 Bd[0.545190.14834810.0175780.5333330.6588240.050984 %_Br0.545190.14834810.0175780.5333330.6588240.050984 %_Br[0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 100 %_BS%_0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 100 Bs0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 50 %_BS%_0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 50 Bs0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 0 %_BS%_0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Orange)(Purple, Orange) 0 3 Bd[00.3697570.91372500.9843140.6823530.0901964 %_Br<BDBCBCBABABAB9B8B7B5B5B4B2B1AFAEADABABA8A7A5A3A2A2A09F9D9B9A98979593918F8C8B88878583817F7C7C7A79787675737271706F6E6C6C6B6A6968686665656361615F5F5D5C5B5957565453514F4E4C4A4946464441413F3D3C3C3B3A3939383737363636353534333332323231312F2F2F2E2D2D2D2D2C2B2B2A2A2A2929292828272626252524242423222221212020201F1E1E1D1D1C1B1B1A1A1A18181715151413131212110F100E0D0D0C0C0B0A0A0907070606050404020101000000000000><C3C2C2C2C2C2C2C2C2C1C1C0C0BFBFBEBEBDBEBCBDBBBCBBBBBAB9B9B9B9B8B8B7B8B7B7B6B7B6B6B6B6B5B5B5B5B4B4B3B3B2B1B1B0B0AFB0AFAFAEAEACADACACABABAAAAA8A8A6A7A5A5A3A2A2A09F9E9E9D9D9B9B9999979795969595949392939090908F8F8E8E8D8C8B8C8A8B8A8A88888787868685858484828282818180807F7F7E7E7D7D7C7D7B7B7A7A7979787977787775767575747473737272717170706F6F6D6E6C6C6B6B6B6B6A696968686767666665666465636362626262616160605F5F5E><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000205080B0E1215191A1D202325292A2D2E313336393A3C3D4041444547494B4D4F525456595B5D5E616366696B6E6F7375787A7D7E818386878A8B8D8F91949697999B9EA0A1A3A4A6A8ABACADAFB1B2B4B5B6B8B9BABCBDBFC1C2C3C5C7C7C7C8C9CBCDCED0D1D2D2D3D4D5D6D7D9DADADADBDCDDDFE0E1E2E2E2E3E4E6E6E5E6E6E7E8E8E8E8E8E8E8E9EAE9EAE9>0<7F808081828283838485858687878888898A8A8B8C8C8D8D8E8F8F909191929293949495969697979899999A9B9B9C9C9D9E9E9FA0A0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABABACADADAEAFAFB0B0B1B2B2B3B4B4B5B5B6B7B7B8B9B9BABABBBCBCBDBEBEBFC0C0C1C1C2C3C3C4C5C5C6C6C7C8C8C9CACACBCBCCCDCDCECFCFD0D0D1D2D2D3D4D4D5D5D6D7D7D8D9D9DADADBDCDCDDDEDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECEDEDEEEEEFF0F0F1F2F2F3F3F4F5F5F6F7F7F8F8F9FAFAFB><47484849494A4A4B4B4C4C4D4D4E4E4F4F505051515252535354555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F606061626263636464656566666767686869696A6A6B6B6C6C6D6D6E6F6F70707171727273737474757576767777787879797A7A7B7C7C7D7D7E7E7F7F808081818282838384848585868687888889898A8A8B8B8C8C8D8D8E8E8F8F909091919292939394959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAE><DDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817>4 %_Br[0 0.369757 0.913725 0 0.984314 0.682353 0.090196 2 50 100 %_BS%_0 0.369757 0.913725 0 0.984314 0.682353 0.090196 2 50 100 Bs0 0.369757 0.913725 0 0.984314 0.682353 0.090196 2 50 51.6854 %_BS%_0 0.369757 0.913725 0 0.984314 0.682353 0.090196 2 50 51.6854 Bs0.741909 0.762966 0 0 0.498039 0.278431 0.866667 2 50 0 %_BS%_0.741909 0.762966 0 0 0.498039 0.278431 0.866667 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 100)(Unnamed gradient 100) 0 5 Bd[<00010406090C0F111315181A1C20222427292B2D2E30323537383A3C3E3F41434446494A4B4C4E4F505253555658585B5C5D5E606061626364666668696A6A6C6E6F70717273747576777878797A7B7C7D7D7E7F81818283838485858686878788898A8A8B8B8B8C8D8D8E8F8F9090909192929393949495959596969797989999999A9A9A9B9C9C9D9D9D9E9E9E9F9F9FA0A0A1A2A2A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A8A8A9A9AAAAAAAAAAABABABABACACACADADADADADAEAEAFAFAFB0B0B0B0B0B0B0B0B0B1B1B1B2B2B2B3B3B3B4B4B4B4B4B4B4B5B5B5B5B6B6B6B6B6B6B6B6B7B7B7B7B8B8B8B8B8B9B9B9B9B9B9B9B9B9B9BABABABABABABBBBBBBBBBBBBCBCBCBCBCBCBCBDBDBDBDBDBDBDBDBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2><0001030507090A0C0D0F1112141618191B1C1E202022242628292B2C2E2E30313234363738393A3C3C3E3E40414243454647484A4A4B4D4D4E4F4F515252535456575859595A5B5C5C5D5D5E5F606161626263646666676869696A6A6B6B6C6D6E6E6F6F7070707172727374747575767677787979797A7B7C7C7D7D7E7E7E7F808081818182828283848485868686878788888889898A8A8B8B8B8B8C8C8C8D8D8E8E8F8F8F8F9090909090919192929393949494949495959596969797979797979898989898989999999A9A9A9A9A9A9B9B9B9C9C9C9C9D9D9D9D9D9D9D9D9E9E9E9E9F9F9F9F9F9F9F9F9FA0A0A0A0A0A1A1A1A1A1A2A2A2A2A2A2A3A3A3A3A3A3A3A3A3A3A3A3A3A4A4A4A4A4A4A4A4A5A5A5A5A5A5A5A5A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A8A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9><00010305080A0C0E1012131517191B1C1E202123242527292B2C2E2F30313334353738393B3B3D3E3F4041424344454647494A4B4C4D4E4E4F5051525353545556575859595A5B5C5C5D5D5E5F6061616262636365666667676869696A6A6B6B6C6D6E6E6F6F6F7070717272737474747575767777777878787879797A7A7A7B7C7C7D7D7D7E7E7E7F80808081818181818282828383838384848585858686878787878888888889898A8A8A8A8A8B8B8B8B8C8C8C8D8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F8F8F8F8F8F8F90909090909091919191919191929292929393939393939393949494949494949494959595959595959595959696969696969696969696969797979797979798989898989898989898989898989898999999999999999999999999999999999999999999999999999999999999999999999999999A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A><0000000000000000000000000000000000000000010101010202020203030405050607070808090A0A0B0B0C0D0E0F10111213141415161718191A1B1C1D1D1F20212324252628292A2B2C2D2E2F30313234353638393A3B3D3E3F40414344454647494A4B4C4C4E4F50525355565658595B5C5E5E5F61626464656768686A6B6D6D6F7070727373757777787A7A7B7D7D7F7F808282848486868888898B8B8D8D8F8F91919393949496969698989A9A9C9C9E9E9E9F9FA1A1A1A3A3A5A5A5A6A6A6A7A7A7A8A8A8AAAAAAACACACAEAEAEB0B0B0B2B2B2B2B3B3B3B3B5B5B5B5B7B7B7B7B9B9B9B9BBBBBBBBBBBDBDBDBDBDBFBFBFBFBFC1C1C1C1C1C1C3C3C3C3C3C3C5C5C5C5C5C5C5C7C7C7C7C7C7C7C7C9C9C9C9C9C9C9C9CACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCECECECECECECECECECECECECECECECECECECECECECED0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1><FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9D8D6D4D2D0CFCDCBC9C8C6C4C3C1BFBEBCBBB9B7B6B4B3B1B0AEADABAAA8A7A5A4A3A1A09F9D9C9A99989795949391908F8E8C8B8A8988878584838281807F7E7C7B7A797877767574737271706F6E6D6C6B6B6A69686766656464636261605F5F5E5D5C5B5B5A59585857565555545353525151504F4F4E4D4D4C4B4B4A4A4948484747464645454443434242414140403F3F3E3E3D3D3D3C3C3B3B3A3A393939383837373736363535353434343333333232323131313030302F2F2F2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A2A292929292828282828272727272726262626262525252525252424242424242323232323232322222222222222222121212121212121202020202020202020201F1F1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1BFF><FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9D8D6D4D2D0CFCDCBC9C8C6C4C3C1BFBEBCBBB9B7B6B4B3B1B0AEADABAAA8A7A5A4A3A1A09F9D9C9A99989795949391908F8E8C8B8A8988878584838281807F7E7C7B7A797877767574737271706F6E6D6C6B6B6A69686766656464636261605F5F5E5D5C5B5B5A59585857565555545353525151504F4F4E4D4D4C4B4B4A4A4948484747464645454443434242414140403F3F3E3E3D3D3D3C3C3B3B3A3A393939383837373736363535353434343333333232323131313030302F2F2F2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A2A292929292828282828272727272726262626262525252525252424242424242323232323232322222222222222222121212121212121202020202020202020201F1F1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1BFF><FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9D8D6D4D2D0CFCDCBC9C8C6C4C3C1BFBEBCBBB9B7B6B4B3B1B0AEADABAAA8A7A5A4A3A1A09F9D9C9A99989795949391908F8E8C8B8A8988878584838281807F7E7C7B7A797877767574737271706F6E6D6C6B6B6A69686766656464636261605F5F5E5D5C5B5B5A59585857565555545353525151504F4F4E4D4D4C4B4B4A4A4948484747464645454443434242414140403F3F3E3E3D3D3D3C3C3B3B3A3A393939383837373736363535353434343333333232323131313030302F2F2F2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A2A292929292828282828272727272726262626262525252525252424242424242323232323232322222222222222222121212121212121202020202020202020201F1F1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1BFF>4 %_Br00001114 %_Br00001114 %_Br00001114 %_Br[0.759182 0.663539 0.605676 0.8215 0.105882 0.105882 0.105882 2 50 100 %_BS%_0.759182 0.663539 0.605676 0.8215 0.105882 0.105882 0.105882 2 50 100 Bs1 0 13 51.0989 %_BS%_1 0 13 51.0989 Bs1 0 61.1111 34.6154 %_BS%_1 0 61.1111 34.6154 Bs1 0 71.0526 20.3297 %_BS%_1 0 71.0526 20.3297 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 101)(Unnamed gradient 101) 0 3 Bd[<C7C6C5C5C5><AFAEADADAD><9C9C9C9C9C><DCDAD9D9D9><1516171717><1516171717><1516171717>4 %_Br<C5C7><ADAF><9C9C><D9DC><1715><1715><1715>4 %_Br[0.773342 0.677241 0.610376 0.849424 0.090196 0.090196 0.090196 2 50 100 %_BS%_0.773342 0.677241 0.610376 0.849424 0.090196 0.090196 0.090196 2 50 100 Bs0.780545 0.685695 0.61236 0.862669 0.082353 0.082353 0.082353 2 23.7288 50 %_BS%_0.780545 0.685695 0.61236 0.862669 0.082353 0.082353 0.082353 2 23.7288 50 Bs0.773342 0.677241 0.610376 0.849424 0.090196 0.090196 0.090196 2 50 0 %_BS%_0.773342 0.677241 0.610376 0.849424 0.090196 0.090196 0.090196 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 114)(Unnamed gradient 114) 0 3 Bd[<00010406090C0F111316181A1C1E212326282A2C2D2F31343637393C3F40424445474A4B4D4F5052535557595C5D5F606162646667696A6C6D6E7072737577787A7B7C7D7F80818284858687888A8B8C8D8E8F91929395969798999A9B9C9D9E9FA0A1A2A3A3A5A6A6A7A8AAAAABACADAEAFB0B0B2B3B3B4B5B6B7B8B9BABBBBBCBDBEBFBFC1C1C2C2C3C4C4C6C6C7C7C8C8C9C9CACACBCBCCCCCDCECECFD0D0D1D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADADBDBDCDCDDDDDDDEDEDEDEDFDFDFDFE0E0E0E0E1E2E2E2E2E2E2E2E3E3E3E4E4E4E4E4E4E5E6E6E6E6E6E6E6E7E7E7E7E8E8E8E8E8E8E8E9E9E9E9E9E9EAEBEBEBEBEBECECECECECECECECECECECEDEDEDEDEDEDEEEEEEEEEEEEEEEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3><000101040508090A0C0C0E1010121214171719191C1C1E1E20212323242727292A2B2D2E2E30313234353738393A3B3D3E3E40404344454546474A4C4D4E4E4F505152535455565758595A5B5C5D5E5F6162636566676869686A6B6B6D6E6D6F70717274737476777778797B7A7C7D7E7E8081818283838586868788888A8B8B8C8C8D8F8F9090919193949495959696989899999A9A9C9B9D9D9E9E9F9FA0A0A2A1A1A2A2A3A3A4A4A4A6A6A7A7A7A8A8A8A9A9ABABAAABABABACACACADADADAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B3B4B4B4B4B5B5B5B5B6B6B6B6B7B7B7B7B7B8B8B8B8B8B9B9B9B9B9BABABABABABABBBBBBBBBBBBBCBCBCBCBCBCBDBDBDBDBDBDBDBDBEBEBEBEBEBEBEBEBFBFBFBFBFBFBFBFBFC0C0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6>00<FFFDFBF9F7F5F3F1EFEDEBE9E7E5E3E1DFDDDBD9D8D6D4D2D0CFCDCBC9C8C6C4C3C1BFBEBCBAB9B7B6B4B3B1AFAEACABAAA8A7A5A4A2A19F9E9D9B9A99979695939291908E8D8C8B8988878685838281807F7E7D7C7B797877767574737271706F6E6D6C6B6A6968686766656463626160605F5E5D5C5C5B5A59585857565555545352525150504F4E4D4D4C4B4B4A4A49484847464645454444434242414140403F3F3E3E3D3D3C3C3B3B3A3A3939383837373636363535343433333332323131313030302F2F2F2E2E2D2D2D2C2C2C2C2B2B2B2A2A2A2929292928282827272727262626262525252524242424242323232323222222222221212121212020202020201F1F1F1F1F1F1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A1A1A19191919191919191919191919191919181818181818181818181818181818181818181818171717171717171717171717171717171717171717171717171717171717171717171717171717161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616FF><FFFDFCFAF8F6F5F3F1F0EEECEBE9E8E6E4E3E1E0DEDDDBDAD8D7D5D4D3D1D0CECDCCCAC9C8C6C5C4C2C1C0BEBDBCBBB9B8B7B6B5B3B2B1B0AFAEACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8F8E8D8C8B8A8A8988878685858483828281807F7F7E7D7C7C7B7A7A7978787776767574747372727171706F6F6E6E6D6D6C6B6B6A6A6969686867676666656564646363626261616060605F5F5E5E5D5D5D5C5C5B5B5B5A5A5A59595858585757575656565555555454545453535352525251515151505050504F4F4F4F4E4E4E4E4D4D4D4D4C4C4C4C4C4B4B4B4B4B4A4A4A4A4A49494949494948484848484847474747474746464646464646464545454545454545444444444444444444434343434343434343434242424242424242424242424241414141414141414141414141414141404040404040404040404040404040404040404040403F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3EFF><FFFEFEFDFCFBFBFAF9F9F8F7F6F6F5F4F4F3F2F2F1F0F0EFEFEEEDEDECECEBEAEAE9E9E8E7E7E6E6E5E5E4E4E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDBDADAD9D9D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D2D1D1D0D0D0CFCFCFCECECDCDCDCCCCCCCBCBCBCACACAC9C9C9C8C8C8C8C7C7C7C6C6C6C5C5C5C5C4C4C4C4C3C3C3C2C2C2C2C1C1C1C1C1C0C0C0C0BFBFBFBFBEBEBEBEBEBDBDBDBDBDBCBCBCBCBCBBBBBBBBBBBBBABABABABABAB9B9B9B9B9B9B8B8B8B8B8B8B8B7B7B7B7B7B7B7B6B6B6B6B6B6B6B6B5B5B5B5B5B5B5B5B4B4B4B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B3B3B3B2B2B2B2B2B2B2B2B2B2B2B2B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0AFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADFF>4 %_Br00001114 %_Br[0.954345 0.775387 0 0 0.086275 0.243137 0.678431 2 50 100 %_BS%_0.954345 0.775387 0 0 0.086275 0.243137 0.678431 2 50 100 Bs1 0 13 45 %_BS%_1 0 13 45 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 120)(Unnamed gradient 120) 1 2 Bd[<9393939494939394949494949494949595959595969595969696969696979796969697979797989798989999999999999A9A9A9A9A9A9B9B9B9B9C9B9C9D9C9D9D9E9E9E9E9E9E9E9F9F9F9FA0A0A0A1A1A1A2A2A2A2A2A2A3A3A3A4A3A3A3A3A4A4A5A6A6A6A6A6A7A6A6A7A7A7A7A7A7A7A6A6A6A6A5A5><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104040707090B0C101415191A1D202124><98989797979595949493939290908F8F8D8C8B8A8A888787868585838280807F7D7D7B7A7878777574747371706F6E6D6B6A68686765636260605E5D5C5B595958555452514F4E4E4B4A47464543413F3D3D3B39363533312F2E2B29272523201F1E1B181714120E0B0A0706030000000000000000000000>0<4D4D4D4D4D4D4D4D4D4D4C4C4C4C4C4C4C4C4C4C4C4C4C4B4B4B4B4B4B4B4B4B4B4B4A4A4A4A4A4A4A4A4A4A4A494949494949494949494848484848484848484747474747474747474646464646464646464545454545454545454444444444444444434343434343434342424242424242424241414141><F1F1F1F0F0F0F0EFEFEFEEEEEDEDEDECECECEBEBEAEAEAE9E9E8E8E7E7E6E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D6D6D5D5D4D4D3D3D2D1D1D0D0CFCFCECECDCCCCCBCBCAC9C9C8C8C7C7C6C5C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B7B6B5B5B4><9696979797989899999A9A9B9C9C9D9D9E9F9FA0A0A1A2A2A3A4A4A5A6A7A7A8A9A9AAABACACADAEAFAFB0B1B2B3B3B4B5B6B7B7B8B9BABBBCBCBDBEBFC0C1C1C2C3C4C5C6C7C8C8C9CACBCCCDCECFD0D1D1D2D3D4D5D6D7D8D9DADBDCDDDEDFDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6>4 %_Br[0.578393 0 0.59765 0 0.301961 0.945098 0.588235 2 57.3034 0 %_BS%_0.578393 0 0.59765 0 0.301961 0.945098 0.588235 2 57.3034 0 Bs0.646479 0.141237 0 0 0.254902 0.705882 0.964706 2 50 100 %_BS%_0.646479 0.141237 0 0 0.254902 0.705882 0.964706 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 124)(Unnamed gradient 124) 0 3 Bd[<EBEAEAEAE9E8E8E7E7E7E7E6E6E5E4E4E3E3E2E3E2E1E1E0DFDFDEDEDEDEDDDDDCDBDBDADAD9D9D9D8D7D7D6D5D5D4D4D3D3D2D2D1D1D0CFCECECDCCCCCBCACACAC9C8C7C7C7C6C6C5C4C3C3C3C3C2C2C2C1C1C0C0C0C0BFBFBFBFBEBEBEBEBEBEBEBDBDBDBCBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B7B7B6B6B6B6B6B5B5B5B5B5B4B4B4B4B3B3B3B3B2B2B1B1B1B0B0B0B0AFAFAEAEAEAEADACACACACABABAAAAAAAAAAA9A9A8A8A8A8A8A8A7A7A7A7A7A6A6A6A6A5A5A5A5A5A4A4A4A4A4A3A3A3A3A3A2A2A2A2A2A1A1A1A1A1A1A0A0A09F9F9F9E9E9E9D9D9D9D9D9D9D9D9C9C9C9C9C9C9C9C9B9B9B9B9B9B9B9B9A9A9A9A9A9A9A9A9A9A9A9A9999999999999999999999999999989898989898989898989797979797979696969696969696969696969696969696969695959595959595959595959595959595959595959595959494949495959595959595959494949494949494949494949494949494949494949494939393939393939393939393939393939393939393939393939393939393939393939393939393939393><BAB9B8B7B6B5B5B3B2B0AFAEADACABAAA8A7A6A4A3A2A09F9E9D9B9997959492908F8D8B898787868382807F7D7B797876767472706F6D6B696967666361605D5D5B5957545352504E4C4B4B4846444442403E3D3D3C3A3838373536343230302F2E2C2C2B29292826262421211F1D1D1B1A1A18161614121210100E0C0C0A0A08050604040100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><00000000000000000000000000000000000000000000000000000000000000000000000000000000010506080A0D0F1012121517181A1B1F2020212325262728282A2C2E2F30313233343636383A3B3B3C3F41424243444747494B4A4C4E4F4F51525355565757585A5B5C5D5D5D5E5F606161616262656666666667686A6A6A6B6C6C6C6E6F6F6F70707072727373737374747676777778787878797979797979797A7A7B7C7C7C7C7D7D7D7D7F7F7F7F7F8080808080818182828282828282828484848485858585858686878787878787878787878787878888888989898A8A8A8B8B8B8B8B8C8C8C8C8C8C8D8D8D8D8D8D8D8D8E8E8F8F8F8F8F8F8F8F8F8F90909090909090909091929292929293939393939393939393939494949494949495959595959595959595959595959595959595959595959596969696969696969696969696969698989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898>0<18181919191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F1F20202021212122222222232323242424242525252626262627272728282828292929292A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F2F30303030313131313232323232333333333434343434353535353536363636363737373737383838383839393939393A3A3A3A3A3A3B3B3B3B3B3C3C3C3C3C3C3D3D3D3D3D3D3E3E3E3E3E3E3E3F3F3F3F3F3F3F4040404040404141414141414141424242424242424343434343434343434444444444444444454545454545454545454646464646464646464647474747474747474747474848484848484848484848484849494949494949494949494949494A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4A4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4D4DFF><464748494A4B4C4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6C6D6E6F70717273747576767778797A7B7C7D7D7E7F8081828383848586878888898A8B8C8C8D8E8F8F909192939394959696979898999A9B9B9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B0B1B2B2B3B3B4B5B5B6B6B7B7B8B9B9BABABBBBBCBCBDBDBEBEBFC0C0C1C1C2C2C3C3C4C4C4C5C5C6C6C7C7C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D6D7D7D7D8D8D8D9D9D9DADADADBDBDBDCDCDCDDDDDDDDDEDEDEDFDFDFDFE0E0E0E0E1E1E1E1E2E2E2E2E3E3E3E3E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E8E9E9E9E9E9E9EAEAEAEAEAEAEAEBEBEBEBEBEBEBECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1FF><BEBEBDBDBDBDBCBCBCBCBBBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B7B6B6B6B6B5B5B5B5B5B4B4B4B4B3B3B3B3B3B2B2B2B2B2B1B1B1B1B1B0B0B0B0B0AFAFAFAFAFAEAEAEAEAEAEADADADADADACACACACACACABABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A3A2A2A2A2A2A2A2A2A1A1A1A1A1A1A1A1A1A0A0A0A0A0A0A0A0A09F9F9F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E9E9D9D9D9D9D9D9D9D9D9D9D9C9C9C9C9C9C9C9C9C9C9C9C9C9B9B9B9B9B9B9B9B9B9B9B9B9B9B9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A99999999999999999999999999999999999999989898989898989898989898989898989898989898989898979797979797979797979797979797979797979797979797979797979797979797979797979797969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696FF>4 %_Br<D3D4D5D5D5D6D7D7D8D8D9DADBDBDCDDDEDEDFE0E0E1E2E3E4E4E5E5E6E7E8E8E9EAEB><A2A2A3A3A3A4A5A6A7A7A7A8A9AAABABACACADAEAEAFB0B1B2B3B3B4B5B6B7B8B8B9BA>00<383736353433323130302F2E2D2C2B2A29282726252423222120201F1E1D1C1B1A1918><626160605F5E5D5C5B5B5A5958575656555453525251504F4E4D4D4C4B4A4948484746><E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBE>4 %_Br[0.578393 0 0.59765 0 0.301961 0.945098 0.588235 2 50 100 %_BS%_0.578393 0 0.59765 0 0.301961 0.945098 0.588235 2 50 100 Bs0.920958 0.728389 0 0 0.094118 0.27451 0.745098 2 23.7288 50 %_BS%_0.920958 0.728389 0 0 0.094118 0.27451 0.745098 2 23.7288 50 Bs0.827756 0.634211 0 0 0.219608 0.384314 0.882353 2 50 0 %_BS%_0.827756 0.634211 0 0 0.219608 0.384314 0.882353 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 30)(Unnamed gradient 30) 0 4 Bd[<D3D2D2D1D1D1D1D0D0D0D0CFCECECDCDCDCDCCCBCBCAC9C8C8C8C7C7C6C5C4C4C4C3C3C2C1C0BFBFBEBEBEBDBDBCBBBABABAB9B9B9B8B8B8B6B6B5B5B4B4B3B3B2B2B1B1B1B1B1B1B1B0B0B0AFAFAEAEAEAEAEADADADACABABABABABABABABABABAAAAAAA9A8A8A8A7A6A5A4A3A3A2A2A1A09F9F9E9E9E9D9D><A09F9E9E9D9D9B9A99989796959492918F8E8D8B8A89888685848281807E7D7B797877757371706E6C6B6A68666462615F5D5B59575553514F4D4A49454441403D3C3A383634322F2E2B2A282624211F1C1A171513100E0C0A0704020000000000000000000000000000000000000000000000000000000000><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103040507090A0A0B0C0D0E0F0E0F1012131314>0<383837373636353534343333323231313130302F2F2E2E2D2D2C2C2B2B2A2A2A2929282827272626252524242323232222212120201F1F1E1E1D1D1C1C1C1B1B1A1A1919181817171616151515141413131212111110100F0F0E0E0E0D0D0C0C0B0B0A0A090908080707070606050504040303020201010000><6465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDD><F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFC>4 %_Br<D4D4D4D4D4D3D4D3D3D3D3><9E9F9F9F9F9FA0A0A0A0A0>00<2D2E2F3031333435363738><6565656565646464646464><EEEFEFF0F0F1F1F2F2F3F3>4 %_Br<DCDBDADADADAD9D9D8D8D7D7D6D6D5D4><A6A5A5A5A4A3A3A2A2A2A1A0A0A09F9E>00<1D1E1F2021222324262728292A2B2C2D><595A5B5B5C5D5E5F5F60616263636465><F4F4F3F3F2F2F2F1F1F0F0F0EFEFEEEE>4 %_Br[0.615076 0 0.079286 0 0 0.866667 0.988235 2 50 98.3146 %_BS%_0.615076 0 0.079286 0 0 0.866667 0.988235 2 50 98.3146 Bs0.825742 0.629023 0 0 0.219608 0.392157 0.952941 2 50 62.9213 %_BS%_0.825742 0.629023 0 0 0.219608 0.392157 0.952941 2 50 62.9213 Bs0.833219 0.621332 0 0 0.176471 0.396078 0.933333 2 50 61.7977 %_BS%_0.833219 0.621332 0 0 0.176471 0.396078 0.933333 2 50 61.7977 Bs0.863645 0.650904 0 0 0.113725 0.34902 0.956863 2 50 0 %_BS%_0.863645 0.650904 0 0 0.113725 0.34902 0.956863 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 71)(Unnamed gradient 71) 0 4 Bd[0.9117110.7868620.6195320.9744870004 %_Br0.9117110.7868620.6195320.9744870004 %_Br<DCDEE0E4E7E8><C0C1C3C6C7C9><9E9E9E9E9E9E><F0F1F3F5F7F8><060504020100><060504020100><060504020100>4 %_Br[0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 98.3146 %_BS%_0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 98.3146 Bs0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 62.9213 %_BS%_0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 62.9213 Bs0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 61.7977 %_BS%_0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 61.7977 Bs0.864378 0.751766 0.617914 0.939635 0.023529 0.023529 0.023529 2 50 0 %_BS%_0.864378 0.751766 0.617914 0.939635 0.023529 0.023529 0.023529 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[<0000010304050608090B0C0E0F1011121314151718191A1B1C1D2021222324252728292A2B2C2D2E2F3031323435363738393A3B3C3D3E3F4041424344454647494A4A4B4C4D4E4F4F505152535455565758585A5B5C5D5D5E5F606061626263646566666768696A6A6B6C6E6F70707172737474757677787879797A7B7C7D7D7E7F8081818283838485858686878788898A8A8B8B8C8D8D8E8F8F909091929293949495959696979899999A9A9B9C9D9D9E9E9F9FA0A1A2A2A3A4A4A5A6A7A8A8A9AAAAABABACADADAEAFB0B0B0B1B2B3B4B4B5B6B6B7B8B9B9BABBBCBDBEBEBEBFC0C1C2C2C3C4C5C6C7C8C8C9CACCCED0D1D2D3D5D6D8DADCDEE0E2E4E7E8><00000102030405050708090A0A0B0C0D0D0E0F1011121213141516171819191A1B1B1C1D1E1F20202122232425262828292A2B2C2C2D2E2E2F303031323334353637373839393A3B3C3C3D3E3E3F4041414243444546474748494A4A4B4C4D4D4E4E4F4F505152525354545657575859595A5B5B5C5C5D5D5E5F5F60616162626364656666676869696A6A6B6B6C6D6E6E6F6F7070717272737474757676777879797A7B7C7D7D7E7E7F80818182828384858686878888898A8B8B8C8C8D8E8F8F90909192939494959697979898999A9A9B9C9D9D9E9F9FA0A1A2A3A3A4A5A6A6A7A7A8A9AAABACADAEAFB0B0B1B2B4B5B6B8B8B9BABBBDBEC0C1C3C4C6C7C9><000001020304050608090A0B0C0D0E0F10111212131415161717191A1B1C1C1D1E1F2021212223242425262728292A2B2C2D2E2E2F2F3031323333343536373838393A3B3B3C3D3D3E3F40404142424344444546464748494A4A4B4C4D4D4E4E4F4F5051515253535454555657575859595A5B5B5C5C5D5D5E5F5F606161626263636465666667676869696A6A6B6B6C6D6E6E6F6F7070717272737474757576777778787879797A7A7B7C7D7D7E7E7F8080818181828283838485858687878888898A8A8B8B8C8D8D8E8E8F8F8F8F909091919293939494959596969798989999999A9A9A9B9B9B9C9C9C9C9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E><0000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101020202020202030303040404050506060707070808080909090A0A0A0B0B0C0C0D0D0E0F0F1011121213131414151616171819191A1B1B1C1D1D1E1F202122232425262728292A2B2C2D2E2E2F3031323435363738393A3B3D3E3F40414344454647494A4B4C4E4F505253555658595B5C5E5F6162646567686A6B6D6F7072737577787A7B7D7F8082848688898B8D8F91939496989A9C9E9FA1A3A5A6A7A8AAACAEB0B2B3B5B7B9BBBDBFC1C3C5C7C9CACBCCCED0D1D3D5D7D9DADCDEDFE1E2E4E5E7E8E8E9EAEBEDEEF0F1F3F4F5F7F8><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 100 %_BS%_0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bugaboo)(Bugaboo) 125.7344 171.4604 459.9473 361.6401 [%AI3_Tile(0 O 0 R 0.720058 0 0.260746 0 0 0.729412 0.776471 Xa 0.720058 0 0.260746 0 0 0.729412 0.776471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR438.3076 133.5688 m437.2646 130.6626 434.0527 129.145 431.1396 130.1899 c430.4658 130.4321 414.5605 139.1567 398.5557 146.7935 C398.1045 145.7485 397.5342 144.7642 396.8369 143.8892 C443.2588 94.8472 444.4092 93.4819 v445.3721 92.3394 445.833 90.8882 445.708 89.3979 c445.5811 87.9019 444.8818 86.5542 443.7393 85.5874 c442.5938 84.6226 441.1436 84.1616 439.6514 84.2866 c438.1611 84.4136 436.8066 85.1147 435.8408 86.2554 c434.6992 87.6147 393.583 140.9868 Y392.4053 140.2505 391.1084 139.6938 389.7295 139.3657 C390.8174 108.4487 390.7783 106.8999 v390.7393 105.4038 390.1182 104.0132 389.0322 102.9819 c387.9502 101.9507 386.5273 101.4077 385.0313 101.4429 c384.9189 101.4507 384.8096 101.4526 384.7002 101.4624 c381.7471 101.7104 379.4971 104.23 379.5732 107.189 c379.6143 108.7241 384.1045 139.3032 Y382.9795 139.5396 381.9141 139.9165 380.9248 140.4263 C355.7344 96.0464 354.5166 94.2769 v353.377 92.6265 351.4268 91.7065 349.4268 91.8784 c348.46 91.9604 347.5244 92.2964 346.7217 92.8511 c345.4912 93.7026 344.6611 94.98 344.3945 96.4526 c344.124 97.9253 344.4453 99.4136 345.2939 100.646 c346.5146 102.4077 378.749 141.8267 Y378.3242 142.1704 377.9268 142.5493 377.5479 142.9419 C367.3564 132.1743 352.085 116.064 351.2393 115.3511 c348.876 113.3589 345.3369 113.6558 343.3428 116.0171 c341.3516 118.3765 341.6514 121.9175 344.0117 123.9106 c344.8604 124.6235 363.4346 137.0532 375.7666 145.2876 C375.6416 145.4966 375.5068 145.7036 375.3916 145.9204 C329.9189 127.6919 328.1748 127.1353 v327.4658 126.9067 326.7314 126.8228 325.9941 126.8872 c323.7314 127.0786 321.8203 128.5962 321.1299 130.7603 c320.6738 132.1841 320.7988 133.7036 321.4814 135.0317 c322.167 136.3638 323.3301 137.3481 324.7549 137.8052 c326.4971 138.3638 374.0977 149.7993 Y373.9326 150.8188 373.874 151.8735 373.9639 152.9497 c373.9893 153.2427 374.0371 153.5298 374.0811 153.8149 C336.5654 160.4497 334.6826 160.9849 v331.7139 161.8286 329.9834 164.9321 330.8271 167.9048 c331.5586 170.478 334.0205 172.1851 336.6826 171.9595 c337.04 171.9292 337.3994 171.8657 337.7471 171.7661 c339.6299 171.231 375.0615 157.1333 Y375.7314 158.6138 376.6689 159.9438 377.8135 161.0571 C333.7188 207.3647 332.335 209.0024 v331.3691 210.147 330.9082 211.5981 331.0342 213.0884 c331.1611 214.5815 331.8594 215.9331 333.0029 216.8979 c334.1494 217.8628 335.5986 218.3267 337.0889 218.2007 c338.5801 218.0737 339.9336 217.3726 340.8975 216.229 c342.2852 214.5884 379.8408 162.6646 Y380.3799 163.0122 380.9502 163.3091 381.5342 163.5728 C374.3486 179.312 362.0068 206.3667 361.7695 207.061 c360.7646 209.9839 362.3252 213.1792 365.2451 214.1831 c368.167 215.188 371.3604 213.6294 372.3652 210.7046 c372.6025 210.0151 379.6357 181.1187 383.7217 164.3091 C384.6104 164.5298 385.5264 164.688 386.4707 164.7075 C385.3604 195.7925 385.5205 197.6831 v385.7803 200.7622 388.4961 203.0552 391.5771 202.7935 c394.6533 202.5327 396.9463 199.8159 396.6855 196.7378 c396.5244 194.8374 390.1709 164.2466 Y391.2881 163.9399 392.335 163.4829 393.3057 162.9087 C419.6768 209.2485 420.9004 211.0337 v422.0361 212.6948 423.9932 213.6206 426.001 213.4507 c426.959 213.3696 427.8877 213.0366 428.6875 212.4897 c431.2354 210.7427 431.8916 207.2485 430.1426 204.6997 c428.9189 202.9126 395.3242 161.4263 Y396.7529 160.145 397.8906 158.5591 398.6357 156.772 C443.6641 168.5669 445.2119 168.856 v445.7119 168.9478 446.2197 168.9731 446.7217 168.9302 c449.2207 168.7192 451.29 166.8501 451.75 164.3813 c452.0273 162.9106 451.7129 161.4204 450.8691 160.1821 c450.0234 158.9497 448.748 158.1177 447.2764 157.8423 c445.7236 157.5493 399.5986 151.4185 Y399.5908 151.2056 399.5928 150.9946 399.5732 150.7798 c399.5264 150.2192 399.4277 149.6782 399.3115 149.1411 C416.4189 144.6138 434.2451 140.981 434.9248 140.7388 c437.835 139.6899 439.3525 136.479 438.3076 133.5688 cf395.9971 151.0825 m396.4277 156.1685 392.6387 160.6587 387.5518 161.0903 c382.4629 161.522 377.9717 157.731 377.542 152.645 c377.1104 147.5552 380.8994 143.0649 385.9883 142.6333 c391.0752 142.2017 395.5654 145.9907 395.9971 151.0825 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR382.8633 142.5532 m380.5645 146.5259 381.918 151.6294 385.8955 153.936 c386.8164 154.4692 410.5762 163.5259 434.5879 174.3872 C433.833 175.9019 433.2656 177.4917 432.9375 179.1255 C345.1934 173.4009 342.541 173.4009 v340.3164 173.4009 338.2266 174.2681 336.6533 175.8403 c335.0781 177.4155 334.2129 179.5044 334.2129 181.7271 c334.2158 183.9536 335.0791 186.0444 336.6543 187.6196 c338.2266 189.1909 340.3203 190.0571 342.543 190.0581 c345.1816 190.0542 432.7617 185.6011 Y433.0508 187.646 433.6621 189.6528 434.6113 191.5337 C398.4492 219.9312 396.7275 221.4624 v395.0645 222.938 394.0811 224.9771 393.9502 227.1968 c393.8164 229.4165 394.5625 231.5552 396.0381 233.2173 c396.1523 233.3423 396.2617 233.4634 396.377 233.5796 c399.4902 236.6919 404.5078 236.8345 407.7969 233.9106 c409.5 232.3921 439.9316 197.9829 Y441.2783 199.0337 442.7285 199.8823 444.2578 200.5181 C417.9873 271.6704 417.1465 274.7505 v416.3633 277.6274 417.1875 280.7222 419.2979 282.8325 c420.3184 283.8521 421.5957 284.5923 422.9971 284.9731 c425.1445 285.5562 427.3906 285.271 429.3184 284.1655 c431.252 283.0591 432.6348 281.2681 433.2207 279.1216 c434.0547 276.0464 447.9316 201.645 Y448.7305 201.8013 449.541 201.8882 450.3516 201.9409 C447.8887 223.8394 444.2246 256.6304 444.2246 258.2749 c444.2256 262.8677 447.958 266.606 452.5498 266.606 c457.1416 266.606 460.877 262.8696 460.877 258.2778 c460.875 256.6313 457.1895 223.6177 454.7227 201.7163 C455.082 201.6567 455.4453 201.6128 455.8008 201.5356 C478.6807 270.6626 479.7197 273.1772 v480.1416 274.2017 480.749 275.1177 481.5273 275.894 c483.9141 278.2798 487.4707 278.9946 490.5889 277.7065 c492.6455 276.8599 494.251 275.2632 495.1045 273.2114 c495.9619 271.1558 495.9639 268.8931 495.1182 266.8354 c494.083 264.3188 461.4463 199.2886 Y462.7646 198.4976 464.0186 197.5562 465.1533 196.4214 c465.4639 196.1118 465.7412 195.7817 466.0244 195.4575 C509.5205 231.7153 511.9326 233.3394 v515.7373 235.9048 520.9248 234.894 523.4912 231.0864 c525.7119 227.7886 525.29 223.3579 522.4814 220.5493 c522.1045 220.1733 521.6885 219.8257 521.2412 219.5249 c518.8291 217.9009 468.8525 191.1636 Y469.8955 188.981 470.5068 186.644 470.6729 184.2788 C549.1514 189.979 552.3369 189.9819 v554.5615 189.9819 556.6533 189.1138 558.2236 187.5425 c559.7998 185.9673 560.6671 183.8784 560.665 181.6548 c560.6631 179.4282 559.7998 177.3364 558.2295 175.7651 c556.6553 174.1938 554.5615 173.3276 552.3389 173.3276 c549.1455 173.3247 470.5557 180.4331 Y470.4346 179.4888 470.2256 178.5571 469.9639 177.6372 C494.7314 170.7153 537.2939 158.8013 538.3096 158.4067 c542.5928 156.7446 544.7275 151.9106 543.0693 147.6313 c541.4111 143.3501 536.5791 141.2173 532.2921 142.8774 c531.2822 143.2681 491.7158 162.9771 468.708 174.4468 C468.1045 173.2251 467.4033 172.0366 466.5225 170.9438 C502.8975 142.4106 504.8916 140.4146 v508.1396 137.1685 508.1416 131.8853 504.8916 128.6372 c501.6475 125.3911 496.3643 125.3931 493.1162 128.6392 c491.1123 130.645 462.4521 167.1821 Y461.0322 166.2075 459.5107 165.4556 457.9287 164.9048 C480.5537 108.7339 481.4072 105.6323 v482.207 102.7495 481.3818 99.6401 479.2627 97.521 c478.2529 96.5112 476.9854 95.7749 475.5967 95.3901 c471.1689 94.1714 466.5732 96.7749 465.3525 101.2046 c464.4971 104.3081 454.3096 164.0298 Y451.4844 163.6372 448.5918 163.8638 445.8496 164.731 C416.0859 102.2788 414.9316 100.2417 v414.5586 99.5854 414.0996 98.9839 413.5703 98.4546 c410.9355 95.8198 406.8271 95.2593 403.5801 97.105 c401.6465 98.1987 400.2539 99.9858 399.6563 102.1284 c399.0664 104.271 399.3447 106.5171 400.4434 108.4546 c401.5977 110.4956 438.8457 168.77 Y438.6104 168.981 438.3672 169.1841 438.1416 169.4087 c437.5508 170.0005 437.0293 170.6313 436.5332 171.2778 C414.9922 156.186 395.1768 140.0649 394.25 139.5259 c390.2715 137.2251 385.167 138.5806 382.8633 142.5532 cf441.9141 173.1821 m447.2793 167.8169 456.0137 167.8169 461.3779 173.1821 c466.7471 178.5513 466.7451 187.2847 461.3799 192.6489 c456.0117 198.0171 447.2803 198.0171 441.9111 192.6489 c436.5469 187.2847 436.5459 178.5513 441.9141 173.1821 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 Xa 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR562.3193 87.8003 m559.4287 85.812 555.458 86.5425 553.4639 89.437 c553.0029 90.1069 536.958 119.2944 527.2568 136.9546 C526.1475 136.2896 524.9678 135.7622 523.7432 135.4155 C530.6709 102.7397 530.8291 100.7183 v530.96 99.0229 530.4229 97.3784 529.3174 96.0874 c528.21 94.7925 526.6689 94.0093 524.9736 93.8784 c523.2783 93.7476 521.6318 94.2827 520.3389 95.3901 c519.0498 96.4937 518.2646 98.0386 518.1299 99.7339 c517.9775 101.7456 518.8174 134.897 Y517.2412 134.9985 515.6768 135.3442 514.1865 135.9575 C494.6807 106.7104 493.6162 105.3081 v492.5889 103.9526 491.0928 103.0815 489.4092 102.8511 c487.7246 102.6187 486.0508 103.0601 484.6953 104.0874 c484.5957 104.1655 484.4961 104.2417 484.3984 104.3237 c481.8438 106.5112 481.4365 110.3276 483.4727 113.0093 c484.5293 114.396 508.9541 139.6294 Y508.0732 140.5942 507.3408 141.6499 506.7646 142.7778 C454.0869 118.5386 451.7881 117.7163 v449.6416 116.9487 447.2344 117.394 445.501 118.8765 c444.6631 119.5952 444.0225 120.5269 443.6494 121.5698 c443.0771 123.1724 443.1631 124.9019 443.8896 126.436 c444.6201 127.9761 445.9043 129.1353 447.5039 129.7095 c449.7979 130.5288 505.6885 145.5103 Y505.5225 146.1099 505.4092 146.7222 505.3193 147.3384 C488.7744 144.1636 463.9971 139.4302 462.7432 139.3325 c459.2422 139.061 456.1709 141.6841 455.8994 145.1841 c455.6279 148.6851 458.2549 151.7534 461.7549 152.0249 c463.0088 152.1216 488.3936 151.2651 505.2314 150.686 C505.2568 150.9614 505.2686 151.2388 505.3076 151.5161 C477.0361 156.5356 475.0576 157.1802 v474.251 157.4429 473.5186 157.8501 472.8799 158.396 c470.9189 160.0757 470.165 162.7437 470.9619 165.1978 c471.4854 166.8149 472.6084 168.1343 474.1201 168.9067 c475.6377 169.6821 477.3604 169.8169 478.9795 169.2944 c480.96 168.6538 506.6846 155.9546 Y507.21 157.0044 507.8525 158.0161 508.6494 158.9478 c508.8682 159.2036 509.1045 159.4331 509.333 159.6685 C479.1221 190.6753 477.7393 192.4194 v475.5596 195.1675 476.0225 199.1821 478.7744 201.3647 c481.1553 203.2495 484.5566 203.1938 486.8633 201.2173 c487.1738 200.9507 487.4629 200.6567 487.7188 200.3345 c489.0986 198.5903 512.4424 162.0815 Y514.0421 163.0024 515.7861 163.6089 517.5791 163.8745 C510.3213 201.0396 510.1318 203.4683 v509.999 205.1655 510.5361 206.8101 511.6416 208.0991 c512.749 209.394 514.29 210.1792 515.9854 210.3081 c517.6826 210.439 519.3271 209.9067 520.6182 208.7993 c521.9092 207.6958 522.6943 206.1509 522.8271 204.4556 c523.0166 202.022 520.5186 164.0132 Y521.2471 163.9751 521.9678 163.8726 522.6865 163.7271 C526.4951 183.0161 533.0537 216.1636 533.2939 216.9624 c534.3096 220.3267 537.8662 222.2388 541.2275 221.229 c544.5889 220.2183 546.501 216.6626 545.4893 213.2974 c545.251 212.5024 532.5713 181.1763 525.1904 162.9595 C526.1572 162.5728 527.1064 162.1069 527.9912 161.5005 C541.4072 183.7534 542.8076 185.3921 v545.0908 188.0591 549.1162 188.3745 551.7861 186.0894 c554.4521 183.8081 554.7627 179.7817 552.4814 177.1128 c551.0713 175.4663 531.1006 158.6206 Y531.9268 157.5952 532.5908 156.48 533.1025 155.3071 C571.1826 174.4331 573.4951 175.27 v575.6436 176.0474 578.0635 175.605 579.8037 174.1167 c580.6338 173.4058 581.2705 172.4819 581.6436 171.4458 c582.835 168.144 581.124 164.4868 577.8193 163.2935 c575.5049 162.4575 533.9834 152.6001 Y534.4521 150.4702 534.4502 148.2524 533.9502 146.1108 C568.9033 133.7808 570.5244 133.02 v571.0459 132.7749 571.5342 132.4614 571.9678 132.0874 c574.1318 130.2358 574.8018 127.1382 573.5889 124.5542 c572.8701 123.0161 571.5889 121.8472 569.9912 121.2671 c568.3936 120.6909 566.665 120.769 565.124 121.4897 c563.4971 122.2515 531.2861 140.5308 Y531.1416 140.3403 530.999 140.144 530.8408 139.9565 c530.4248 139.4722 529.9756 139.0376 529.5127 138.6216 C542.29 123.0942 563.4873 97.3335 563.9521 96.6597 c565.9424 93.7612 565.21 89.7905 562.3193 87.8003 cf527.7412 142.6108 m531.5127 147.0181 530.9951 153.6743 526.5889 157.4458 c522.1787 161.2202 515.5225 160.7036 511.751 156.2964 c507.9756 151.8862 508.4932 145.229 512.9033 141.4546 c517.3115 137.6831 523.9678 138.2007 527.7412 142.6108 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR478.1182 222.8276 m476.0361 221.7632 473.4756 222.5874 472.4072 224.6714 c472.1631 225.1548 464.0771 245.8228 459.1904 258.3267 C458.3994 257.9839 457.5732 257.7368 456.7354 257.6128 C458.4971 235.4272 458.4268 234.0776 v458.3662 232.9458 457.8701 231.9048 457.0283 231.1479 c456.1855 230.3882 455.0986 230.0034 453.9678 230.063 c452.8359 230.1235 451.7939 230.6177 451.0361 231.4604 c450.2783 232.3013 449.8936 233.3901 449.9512 234.5229 c450.0234 235.8647 453.4365 257.6948 Y452.4053 257.8989 451.3994 258.2622 450.4678 258.7954 C435.0596 241.1538 434.2354 240.3169 v433.4395 239.5112 432.376 239.0649 431.2432 239.0581 c430.1094 239.0493 429.042 239.4849 428.2354 240.2788 c428.1768 240.3413 428.1162 240.3999 428.0605 240.4634 c426.5615 242.1284 426.6211 244.6841 428.1963 246.2808 c429.0146 247.1069 447.3271 261.6724 Y446.8291 262.3862 446.4365 263.146 446.1533 263.9419 C409.2578 252.4683 407.668 252.1226 v406.1846 251.8013 404.6318 252.3022 403.6143 253.4321 c403.123 253.978 402.7803 254.6479 402.6221 255.3696 c402.3838 256.479 402.5889 257.6138 403.2021 258.5659 c403.8174 259.519 404.7656 260.1743 405.8721 260.4165 c407.458 260.7593 445.6768 265.8403 Y445.6201 266.2495 445.5967 266.6646 445.5918 267.0796 C434.3857 266.4077 417.6064 265.4165 416.7705 265.4604 c414.4336 265.5835 412.6299 267.5796 412.7529 269.9165 c412.876 272.2524 414.876 274.0552 417.2109 273.9321 c418.0488 273.8872 434.7451 271.1323 445.8213 269.2983 C445.8623 269.478 445.8936 269.6606 445.9424 269.8403 C427.6963 275.5942 426.4443 276.1899 v425.9346 276.4341 425.4863 276.7661 425.1104 277.1821 c423.9609 278.4604 423.6924 280.2876 424.4297 281.8413 c424.917 282.8647 425.7715 283.6392 426.8369 284.02 c427.9063 284.4009 429.0566 284.3413 430.0811 283.8569 c431.335 283.2622 447.2354 272.6538 Y447.6729 273.3022 448.1846 273.9165 448.792 274.4624 c448.958 274.6128 449.1338 274.7437 449.3057 274.8794 C432.0186 297.9712 431.2549 299.2427 v430.0518 301.2456 430.7041 303.8589 432.71 305.063 c434.4463 306.104 436.6885 305.7729 438.042 304.2681 c438.2236 304.0659 438.3896 303.8462 438.5303 303.6118 c439.293 302.3394 451.5684 276.2065 Y452.7041 276.6763 453.9102 276.9272 455.1162 276.9487 C453.5244 302.1294 453.6094 303.7495 v453.668 304.8823 454.165 305.9224 455.0068 306.6792 c455.8496 307.439 456.9355 307.8247 458.0664 307.7642 c459.1992 307.7046 460.2393 307.2114 460.9971 306.3677 c461.7549 305.5269 462.1416 304.439 462.083 303.3081 c461.999 301.6831 457.0713 276.7856 Y457.5479 276.6978 458.0156 276.5669 458.4775 276.4097 C462.6592 288.8257 469.8486 310.1606 470.0771 310.6685 c471.0381 312.8032 473.5518 313.7603 475.6865 312.8032 c477.8193 311.8462 478.7764 309.3315 477.8174 307.1958 c477.5908 306.6909 466.5127 287.0874 460.0674 275.687 C460.6729 275.3481 461.2588 274.9585 461.79 274.4819 C472.5732 288.0278 473.6396 288.9897 v475.3779 290.5542 478.0654 290.4165 479.6318 288.6763 c481.1963 286.939 481.0557 284.2524 479.3174 282.6851 c478.2451 281.7183 463.5967 272.311 Y464.0537 271.562 464.3975 270.769 464.6338 269.9487 C491.4424 279.3032 493.042 279.6558 v494.5303 279.9839 496.0908 279.4829 497.1123 278.3501 c497.5986 277.8081 497.9404 277.1431 498.0967 276.4272 c498.6006 274.1431 497.1533 271.8745 494.8682 271.3696 c493.2646 271.0181 464.9834 268.0835 Y465.1084 266.6372 464.917 265.1714 464.4014 263.8003 C486.4336 252.6401 487.4375 251.9985 v487.7617 251.7915 488.0566 251.5415 488.3115 251.2563 c489.5811 249.8462 489.7568 247.7427 488.7334 246.1401 c488.126 245.1851 487.1777 244.5239 486.0723 244.2769 c484.9668 244.0347 483.832 244.2349 482.875 244.8462 c481.8672 245.4888 462.1611 260.3423 Y462.0479 260.229 461.9385 260.1108 461.8174 260.0015 c461.501 259.7173 461.165 259.4692 460.8242 259.2349 C467.9268 247.8726 479.7119 229.0249 479.9619 228.5396 c481.0264 226.4546 480.2002 223.8931 478.1182 222.8276 cf459.9971 262.0239 m462.8701 264.6099 463.1006 269.0513 460.5156 271.9243 c457.9268 274.7983 453.4834 275.0298 450.6123 272.4438 c447.7383 269.855 447.5049 265.4126 450.0947 262.5386 c452.6807 259.6655 457.124 259.4351 459.9971 262.0239 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR215.7568 47.4634 m213.458 51.436 214.8115 56.5396 218.7891 58.8462 c219.71 59.3794 243.4697 68.436 267.4814 79.2974 C266.7266 80.812 266.1592 82.4019 265.8311 84.0356 C178.0869 78.311 175.4346 78.311 v173.21 78.311 171.1201 79.1782 169.5474 80.7505 c167.9717 82.3257 167.1064 84.4146 167.1064 86.6372 c167.1094 88.8638 167.9731 90.9546 169.5479 92.5298 c171.1201 94.1011 173.2139 94.9673 175.4365 94.9683 c178.0752 94.9644 265.6553 90.5112 Y265.9443 92.5562 266.5557 94.563 267.5049 96.4438 C231.3428 124.8413 229.6211 126.3726 v227.958 127.8481 226.9746 129.8872 226.8438 132.1069 c226.71 134.3267 227.4561 136.4653 228.9316 138.1274 c229.0459 138.2524 229.1553 138.3735 229.2705 138.4897 c232.3838 141.6021 237.4014 141.7446 240.6904 138.8208 c242.3936 137.3022 272.8252 102.8931 Y274.1719 103.9438 275.6221 104.7925 277.1514 105.4282 C250.8809 176.5806 250.04 179.6606 v249.2568 182.5376 250.0811 185.6323 252.1914 187.7427 c253.2119 188.7622 254.4893 189.5024 255.8906 189.8833 c258.0381 190.4663 260.2842 190.1812 262.2119 189.0757 c264.1455 187.9692 265.5283 186.1782 266.1143 184.0317 c266.9482 180.9565 280.8252 106.5552 Y281.624 106.7114 282.4346 106.7983 283.2451 106.8511 C280.7822 128.7495 277.1182 161.5405 277.1182 163.1851 c277.1191 167.7778 280.8516 171.5161 285.4434 171.5161 c290.0352 171.5161 293.7705 167.7798 293.7705 163.188 c293.7686 161.5415 290.083 128.5278 287.6162 106.6265 C287.9756 106.5669 288.3389 106.5229 288.6943 106.4458 C311.5747 175.5728 312.6138 178.0874 v313.0356 179.1118 313.6431 180.0278 314.4209 180.8042 c316.8076 183.1899 320.3643 183.9048 323.4824 182.6167 c325.5391 181.77 327.1445 180.1733 327.998 178.1216 c328.8555 176.0659 328.8574 173.8032 328.0117 171.7456 c326.9766 169.229 294.3403 104.1987 Y295.6587 103.4077 296.9126 102.4663 298.0474 101.3315 c298.3579 101.022 298.6353 100.6919 298.9185 100.3677 C342.4141 136.6255 344.8262 138.2495 v348.6309 140.8149 353.8184 139.8042 356.3848 135.9966 c358.6055 132.6987 358.1836 128.2681 355.375 125.4595 c354.998 125.0835 354.582 124.7358 354.1348 124.4351 c351.7227 122.811 301.7466 96.0737 Y302.7896 93.8911 303.4009 91.5542 303.5669 89.189 C382.0449 94.8892 385.2305 94.8921 v387.4551 94.8921 389.5469 94.0239 391.1172 92.4526 c392.6934 90.8774 393.5605 88.7886 393.5586 86.5649 c393.5566 84.3384 392.6934 82.2466 391.123 80.6753 c389.5488 79.104 387.4551 78.2378 385.2324 78.2378 c382.0391 78.2349 303.4497 85.3433 Y303.3286 84.3989 303.1196 83.4673 302.8579 82.5474 C327.625 75.6255 370.1875 63.7114 371.2031 63.3169 c375.4863 61.6548 377.6211 56.8208 375.9629 52.5415 c374.3047 48.2603 369.4727 46.1274 365.1855 47.7876 c364.1758 48.1782 324.6094 67.8872 301.6021 79.3569 C300.9985 78.1353 300.2974 76.9468 299.4165 75.854 C335.791 47.3208 337.7852 45.3247 v341.0332 42.0786 341.0352 36.7954 337.7852 33.5474 c334.541 30.3013 329.2578 30.3032 326.0098 33.5493 c324.0059 35.5552 295.3462 72.0923 Y293.9263 71.1177 292.4043 70.3657 290.8223 69.8149 C313.4478 13.644 314.3013 10.5425 v315.1006 7.65967 314.2759 4.55029 312.1567 2.43115 c311.147 1.42139 309.8794 0.685059 308.4907 0.300293 c304.063 -0.918457 299.4673 1.68506 298.2466 6.11475 c297.3911 9.21826 287.2031 68.9399 Y284.3779 68.5474 281.4854 68.7739 278.7432 69.6411 C248.9795 7.18896 247.8252 5.15186 v247.4521 4.49561 246.9932 3.89404 246.4639 3.36475 c243.8291 0.72998 239.7207 0.169434 236.4736 2.01514 c234.54 3.10889 233.1475 4.896 232.5498 7.03857 c231.96 9.18115 232.2383 11.4272 233.3369 13.3647 c234.4912 15.4058 271.7393 73.6802 Y271.5039 73.8911 271.2607 74.0942 271.0352 74.3188 c270.4443 74.9106 269.9229 75.5415 269.4268 76.188 C247.8857 61.0962 228.0703 44.9751 227.1436 44.436 c223.165 42.1353 218.0605 43.4907 215.7568 47.4634 cf274.8076 78.0923 m280.1729 72.7271 288.9072 72.7271 294.272 78.0923 c299.6411 83.4614 299.6392 92.1948 294.2739 97.5591 c288.9053 102.9272 280.1738 102.9272 274.8047 97.5591 c269.4404 92.1948 269.4395 83.4614 274.8076 78.0923 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR311.0112 127.7378 m308.9302 126.6733 306.3687 127.4976 305.3013 129.5815 c305.0562 130.0649 296.9712 150.7329 292.0835 163.2368 C291.2935 162.894 290.4673 162.647 289.6289 162.5229 C291.3901 140.3374 291.3198 138.9878 v291.2603 137.856 290.7632 136.8149 289.9219 136.0581 c289.0791 135.2983 287.9927 134.9136 286.8608 134.9731 c285.7295 135.0337 284.688 135.5278 283.9297 136.3706 c283.1724 137.2114 282.7871 138.3003 282.8447 139.4331 c282.917 140.7749 286.3306 162.605 Y285.2988 162.8091 284.293 163.1724 283.3613 163.7056 C267.9531 146.064 267.1284 145.2271 v266.333 144.4214 265.27 143.9751 264.1372 143.9683 c263.0029 143.9595 261.9355 144.395 261.1289 145.189 c261.0698 145.2515 261.0103 145.3101 260.9541 145.3735 c259.4551 147.0386 259.5146 149.5942 261.0898 151.1909 c261.9082 152.0171 280.2207 166.5825 Y279.7227 167.2964 279.3306 168.0562 279.0464 168.8521 C242.1514 157.3784 240.5615 157.0327 v239.0786 156.7114 237.5254 157.2124 236.5078 158.3423 c236.0166 158.8882 235.6738 159.5581 235.5161 160.2798 c235.2778 161.3892 235.4829 162.5239 236.0962 163.4761 c236.7104 164.4292 237.6592 165.0845 238.7661 165.3267 c240.3521 165.6694 278.5708 170.7505 Y278.5142 171.1597 278.4902 171.5747 278.4854 171.9897 C267.2793 171.3179 250.5005 170.3267 249.6641 170.3706 c247.3271 170.4937 245.5239 172.4897 245.6465 174.8267 c245.769 177.1626 247.7695 178.9653 250.1045 178.8423 c250.9424 178.7974 267.6392 176.0425 278.7148 174.2085 C278.7563 174.3882 278.7866 174.5708 278.8359 174.7505 C260.5903 180.5044 259.3384 181.1001 v258.8286 181.3442 258.3799 181.6763 258.0039 182.0923 c256.8545 183.3706 256.5854 185.1978 257.3232 186.7515 c257.8101 187.7749 258.665 188.5493 259.73 188.9302 c260.7998 189.311 261.9502 189.2515 262.9741 188.7671 c264.2285 188.1724 280.1294 177.564 Y280.5669 178.2124 281.0781 178.8267 281.686 179.3726 c281.8521 179.5229 282.0278 179.6538 282.1997 179.7896 C264.9116 202.8813 264.1484 204.1528 v262.9458 206.1558 263.5981 208.769 265.6035 209.9731 c267.3398 211.0142 269.582 210.6831 270.9355 209.1782 c271.1172 208.9761 271.2837 208.7563 271.4243 208.522 c272.1865 207.2495 284.4619 181.1167 Y285.5981 181.5864 286.8037 181.8374 288.0098 181.8589 C286.4185 207.0396 286.5029 208.6597 v286.5615 209.7925 287.0591 210.8325 287.9004 211.5894 c288.7432 212.3491 289.8291 212.7349 290.96 212.6743 c292.0928 212.6147 293.1333 212.1216 293.8911 211.2778 c294.6489 210.437 295.0356 209.3491 294.9761 208.2183 c294.8921 206.5933 289.9648 181.6958 Y290.4414 181.6079 290.9092 181.4771 291.3716 181.3198 C295.5522 193.7358 302.7427 215.0708 302.9702 215.5786 c303.9312 217.7134 306.4458 218.6704 308.5796 217.7134 c310.7134 216.7563 311.6694 214.2417 310.7114 212.106 c310.4849 211.6011 299.4067 191.9976 292.9604 180.5972 C293.5659 180.2583 294.1528 179.8687 294.6841 179.3921 C305.4673 192.938 306.5337 193.8999 v308.272 195.4644 310.9595 195.3267 312.5259 193.5864 c314.0903 191.8491 313.9487 189.1626 312.2114 187.5952 c311.1392 186.6284 296.4907 177.2212 Y296.9478 176.4722 297.2915 175.6792 297.5278 174.8589 C324.3359 184.2134 325.9355 184.5659 v327.4238 184.894 328.9844 184.3931 330.0059 183.2603 c330.4922 182.7183 330.834 182.0532 330.9902 181.3374 c331.4941 179.0532 330.0469 176.7847 327.7617 176.2798 c326.1582 175.9282 297.8774 172.9937 Y298.0024 171.5474 297.8101 170.0815 297.2954 168.7104 C319.3271 157.5503 320.3311 156.9087 v320.6553 156.7017 320.9502 156.4517 321.2051 156.1665 c322.4746 154.7563 322.6504 152.6528 321.627 151.0503 c321.0195 150.0952 320.0713 149.4341 318.9658 149.187 c317.8604 148.9448 316.7256 149.145 315.7686 149.7563 c314.7607 150.3989 295.0542 165.2524 Y294.9419 165.1392 294.8325 165.021 294.7114 164.9116 c294.394 164.6274 294.0591 164.3794 293.7178 164.145 C300.8208 152.7827 312.605 133.9351 312.856 133.4497 c313.9194 131.3647 313.0933 128.8032 311.0112 127.7378 cf292.8906 166.9341 m295.7642 169.52 295.9946 173.9614 293.4092 176.8345 c290.8203 179.7085 286.3774 179.9399 283.5059 177.354 c280.6318 174.7651 280.3989 170.3228 282.9888 167.4487 c285.5747 164.5757 290.0171 164.3452 292.8906 166.9341 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR48.6504 142.5532 m46.3516 146.5259 47.7051 151.6294 51.6826 153.936 c52.6035 154.4692 76.3633 163.5259 100.375 174.3872 C99.6201 175.9019 99.0527 177.4917 98.7246 179.1255 C10.9805 173.4009 8.32813 173.4009 v6.10352 173.4009 4.01367 174.2681 2.44092 175.8403 c0.865234 177.4155 0 179.5044 0 181.7271 c0.00293 183.9536 0.866699 186.0444 2.44141 187.6196 c4.01367 189.1909 6.10742 190.0571 8.33008 190.0581 c10.9688 190.0542 98.5488 185.6011 Y98.8379 187.646 99.4492 189.6528 100.3984 191.5337 C64.2363 219.9312 62.5146 221.4624 v60.8516 222.938 59.8682 224.9771 59.7373 227.1968 c59.6035 229.4165 60.3496 231.5552 61.8252 233.2173 c61.9395 233.3423 62.0488 233.4634 62.1641 233.5796 c65.2773 236.6919 70.2949 236.8345 73.584 233.9106 c75.2871 232.3921 105.7188 197.9829 Y107.0654 199.0337 108.5156 199.8823 110.0449 200.5181 C83.7744 271.6704 82.9336 274.7505 v82.1504 277.6274 82.9746 280.7222 85.085 282.8325 c86.1055 283.8521 87.3828 284.5923 88.7842 284.9731 c90.9316 285.5562 93.1777 285.271 95.1055 284.1655 c97.0391 283.0591 98.4219 281.2681 99.0078 279.1216 c99.8418 276.0464 113.7188 201.645 Y114.5176 201.8013 115.3281 201.8882 116.1387 201.9409 C113.6758 223.8394 110.0117 256.6304 110.0117 258.2749 c110.0127 262.8677 113.7451 266.606 118.3369 266.606 c122.9287 266.606 126.6641 262.8696 126.6641 258.2778 c126.6621 256.6313 122.9766 223.6177 120.5098 201.7163 C120.8691 201.6567 121.2324 201.6128 121.5879 201.5356 C144.4683 270.6626 145.5073 273.1772 v145.9292 274.2017 146.5366 275.1177 147.3145 275.894 c149.7012 278.2798 153.2578 278.9946 156.376 277.7065 c158.4326 276.8599 160.0381 275.2632 160.8916 273.2114 c161.749 271.1558 161.751 268.8931 160.9053 266.8354 c159.8701 264.3188 127.2339 199.2886 Y128.5522 198.4976 129.8062 197.5562 130.9409 196.4214 c131.2515 196.1118 131.5288 195.7817 131.812 195.4575 C175.3076 231.7153 177.7197 233.3394 v181.5244 235.9048 186.7119 234.894 189.2783 231.0864 c191.499 227.7886 191.0771 223.3579 188.2686 220.5493 c187.8916 220.1733 187.4756 219.8257 187.0283 219.5249 c184.6162 217.9009 134.6401 191.1636 Y135.6831 188.981 136.2944 186.644 136.4604 184.2788 C214.9385 189.979 218.124 189.9819 v220.3486 189.9819 222.4404 189.1138 224.0107 187.5425 c225.5869 185.9673 226.4541 183.8784 226.4521 181.6548 c226.4502 179.4282 225.5869 177.3364 224.0166 175.7651 c222.4424 174.1938 220.3486 173.3276 218.126 173.3276 c214.9326 173.3247 136.3433 180.4331 Y136.2222 179.4888 136.0132 178.5571 135.7515 177.6372 C160.5186 170.7153 203.0811 158.8013 204.0967 158.4067 c208.3799 156.7446 210.5146 151.9106 208.8564 147.6313 c207.1982 143.3501 202.3662 141.2173 198.0791 142.8774 c197.0693 143.2681 157.5029 162.9771 134.4956 174.4468 C133.8921 173.2251 133.1909 172.0366 132.3101 170.9438 C168.6846 142.4106 170.6787 140.4146 v173.9268 137.1685 173.9287 131.8853 170.6787 128.6372 c167.4346 125.3911 162.1514 125.3931 158.9033 128.6392 c156.8994 130.645 128.2397 167.1821 Y126.8198 166.2075 125.2979 165.4556 123.7158 164.9048 C146.3413 108.7339 147.1948 105.6323 v147.9941 102.7495 147.1694 99.6401 145.0503 97.521 c144.0405 96.5112 142.7729 95.7749 141.3843 95.3901 c136.9565 94.1714 132.3608 96.7749 131.1401 101.2046 c130.2847 104.3081 120.0967 164.0298 Y117.2715 163.6372 114.3789 163.8638 111.6367 164.731 C81.873 102.2788 80.7188 100.2417 v80.3457 99.5854 79.8867 98.9839 79.3574 98.4546 c76.7227 95.8198 72.6143 95.2593 69.3672 97.105 c67.4336 98.1987 66.041 99.9858 65.4434 102.1284 c64.8535 104.271 65.1318 106.5171 66.2305 108.4546 c67.3848 110.4956 104.6328 168.77 Y104.3975 168.981 104.1543 169.1841 103.9287 169.4087 c103.3379 170.0005 102.8164 170.6313 102.3203 171.2778 C80.7793 156.186 60.9639 140.0649 60.0371 139.5259 c56.0586 137.2251 50.9541 138.5806 48.6504 142.5532 cf107.7012 173.1821 m113.0664 167.8169 121.8008 167.8169 127.1655 173.1821 c132.5347 178.5513 132.5327 187.2847 127.1675 192.6489 c121.7988 198.0171 113.0674 198.0171 107.6982 192.6489 c102.334 187.2847 102.333 178.5513 107.7012 173.1821 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 Xa 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR228.1064 87.8003 m225.2158 85.812 221.2451 86.5425 219.251 89.437 c218.79 90.1069 202.7451 119.2944 193.0439 136.9546 C191.9346 136.2896 190.7549 135.7622 189.5303 135.4155 C196.458 102.7397 196.6162 100.7183 v196.7471 99.0229 196.21 97.3784 195.1045 96.0874 c193.9971 94.7925 192.4561 94.0093 190.7607 93.8784 c189.0654 93.7476 187.4189 94.2827 186.126 95.3901 c184.8369 96.4937 184.0518 98.0386 183.917 99.7339 c183.7646 101.7456 184.6045 134.897 Y183.0283 134.9985 181.4639 135.3442 179.9736 135.9575 C160.4678 106.7104 159.4033 105.3081 v158.376 103.9526 156.8799 103.0815 155.1963 102.8511 c153.5117 102.6187 151.8379 103.0601 150.4824 104.0874 c150.3828 104.1655 150.2832 104.2417 150.1855 104.3237 c147.6309 106.5112 147.2241 110.3276 149.2598 113.0093 c150.3164 114.396 174.7412 139.6294 Y173.8604 140.5942 173.1279 141.6499 172.5518 142.7778 C119.874 118.5386 117.5752 117.7163 v115.4292 116.9487 113.0215 117.394 111.2876 118.8765 c110.4497 119.5952 109.8101 120.5269 109.436 121.5698 c108.8647 123.1724 108.9497 124.9019 109.6772 126.436 c110.4072 127.9761 111.6914 129.1353 113.291 129.7095 c115.5854 130.5288 171.4756 145.5103 Y171.3096 146.1099 171.1963 146.7222 171.1064 147.3384 C154.5615 144.1636 129.7837 139.4302 128.5308 139.3325 c125.0293 139.061 121.9585 141.6841 121.687 145.1841 c121.415 148.6851 124.042 151.7534 127.5415 152.0249 c128.7964 152.1216 154.1807 151.2651 171.0186 150.686 C171.0439 150.9614 171.0557 151.2388 171.0947 151.5161 C142.8228 156.5356 140.8452 157.1802 v140.0386 157.4429 139.3052 157.8501 138.6665 158.396 c136.7065 160.0757 135.9517 162.7437 136.7485 165.1978 c137.2729 166.8149 138.396 168.1343 139.9067 168.9067 c141.4243 169.6821 143.1479 169.8169 144.7661 169.2944 c146.7476 168.6538 172.4717 155.9546 Y172.9971 157.0044 173.6396 158.0161 174.4365 158.9478 c174.6553 159.2036 174.8916 159.4331 175.1201 159.6685 C144.9087 190.6753 143.5269 192.4194 v141.3472 195.1675 141.8101 199.1821 144.561 201.3647 c146.9429 203.2495 150.3438 203.1938 152.6504 201.2173 c152.9609 200.9507 153.25 200.6567 153.5059 200.3345 c154.8857 198.5903 178.2295 162.0815 Y179.8291 163.0024 181.5732 163.6089 183.3662 163.8745 C176.1084 201.0396 175.9189 203.4683 v175.7861 205.1655 176.3232 206.8101 177.4287 208.0991 c178.5361 209.394 180.0771 210.1792 181.7725 210.3081 c183.4697 210.439 185.1143 209.9067 186.4053 208.7993 c187.6963 207.6958 188.4814 206.1509 188.6143 204.4556 c188.8037 202.022 186.3057 164.0132 Y187.0342 163.9751 187.7549 163.8726 188.4736 163.7271 C192.2822 183.0161 198.8408 216.1636 199.0811 216.9624 c200.0967 220.3267 203.6533 222.2388 207.0146 221.229 c210.376 220.2183 212.2881 216.6626 211.2764 213.2974 c211.0381 212.5024 198.3584 181.1763 190.9775 162.9595 C191.9443 162.5728 192.8936 162.1069 193.7783 161.5005 C207.1943 183.7534 208.5947 185.3921 v210.8779 188.0591 214.9033 188.3745 217.5732 186.0894 c220.2393 183.8081 220.5498 179.7817 218.2686 177.1128 c216.8584 175.4663 196.8877 158.6206 Y197.7139 157.5952 198.3779 156.48 198.8896 155.3071 C236.9697 174.4331 239.2822 175.27 v241.4307 176.0474 243.8506 175.605 245.5908 174.1167 c246.4209 173.4058 247.0576 172.4819 247.4307 171.4458 c248.6221 168.144 246.9111 164.4868 243.6064 163.2935 c241.292 162.4575 199.7705 152.6001 Y200.2393 150.4702 200.2373 148.2524 199.7373 146.1108 C234.6904 133.7808 236.3115 133.02 v236.833 132.7749 237.3213 132.4614 237.7549 132.0874 c239.9189 130.2358 240.5889 127.1382 239.376 124.5542 c238.6572 123.0161 237.376 121.8472 235.7783 121.2671 c234.1807 120.6909 232.4521 120.769 230.9111 121.4897 c229.2842 122.2515 197.0732 140.5308 Y196.9287 140.3403 196.7861 140.144 196.6279 139.9565 c196.2119 139.4722 195.7627 139.0376 195.2998 138.6216 C208.0771 123.0942 229.2744 97.3335 229.7393 96.6597 c231.7295 93.7612 230.9971 89.7905 228.1064 87.8003 cf193.5283 142.6108 m197.2998 147.0181 196.7822 153.6743 192.376 157.4458 c187.9658 161.2202 181.3096 160.7036 177.5381 156.2964 c173.7627 151.8862 174.2803 145.229 178.6904 141.4546 c183.0986 137.6831 189.7549 138.2007 193.5283 142.6108 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR143.9048 222.8276 m141.8237 221.7632 139.2622 222.5874 138.1948 224.6714 c137.9497 225.1548 129.8647 245.8228 124.9771 258.3267 C124.187 257.9839 123.3608 257.7368 122.5225 257.6128 C124.2837 235.4272 124.2134 234.0776 v124.1538 232.9458 123.6567 231.9048 122.8154 231.1479 c121.9727 230.3882 120.8862 230.0034 119.7544 230.063 c118.623 230.1235 117.5815 230.6177 116.8232 231.4604 c116.0659 232.3013 115.6807 233.3901 115.7383 234.5229 c115.8105 235.8647 119.2241 257.6948 Y118.1924 257.8989 117.1865 258.2622 116.2549 258.7954 C100.8467 241.1538 100.022 240.3169 v99.2266 239.5112 98.1636 239.0649 97.0308 239.0581 c95.8965 239.0493 94.8291 239.4849 94.0225 240.2788 c93.9634 240.3413 93.9038 240.3999 93.8477 240.4634 c92.3486 242.1284 92.4082 244.6841 93.9834 246.2808 c94.8018 247.1069 113.1143 261.6724 Y112.6162 262.3862 112.2241 263.146 111.9399 263.9419 C75.0449 252.4683 73.4551 252.1226 v71.9722 251.8013 70.4189 252.3022 69.4014 253.4321 c68.9102 253.978 68.5674 254.6479 68.4097 255.3696 c68.1714 256.479 68.3765 257.6138 68.9897 258.5659 c69.604 259.519 70.5527 260.1743 71.6597 260.4165 c73.2456 260.7593 111.4644 265.8403 Y111.4077 266.2495 111.3838 266.6646 111.3789 267.0796 C100.1729 266.4077 83.394 265.4165 82.5576 265.4604 c80.2207 265.5835 78.4175 267.5796 78.54 269.9165 c78.6626 272.2524 80.6631 274.0552 82.998 273.9321 c83.8359 273.8872 100.5327 271.1323 111.6084 269.2983 C111.6499 269.478 111.6802 269.6606 111.7295 269.8403 C93.4839 275.5942 92.2319 276.1899 v91.7222 276.4341 91.2734 276.7661 90.8975 277.1821 c89.748 278.4604 89.479 280.2876 90.2168 281.8413 c90.7036 282.8647 91.5586 283.6392 92.6235 284.02 c93.6934 284.4009 94.8438 284.3413 95.8677 283.8569 c97.1221 283.2622 113.0229 272.6538 Y113.4604 273.3022 113.9717 273.9165 114.5796 274.4624 c114.7456 274.6128 114.9214 274.7437 115.0933 274.8794 C97.8052 297.9712 97.042 299.2427 v95.8394 301.2456 96.4917 303.8589 98.4971 305.063 c100.2334 306.104 102.4756 305.7729 103.8291 304.2681 c104.0107 304.0659 104.1772 303.8462 104.3179 303.6118 c105.0801 302.3394 117.3555 276.2065 Y118.4917 276.6763 119.6973 276.9272 120.9033 276.9487 C119.312 302.1294 119.3965 303.7495 v119.4551 304.8823 119.9526 305.9224 120.7939 306.6792 c121.6367 307.439 122.7227 307.8247 123.8535 307.7642 c124.9863 307.7046 126.0269 307.2114 126.7847 306.3677 c127.5425 305.5269 127.9292 304.439 127.8696 303.3081 c127.7856 301.6831 122.8584 276.7856 Y123.335 276.6978 123.8027 276.5669 124.2651 276.4097 C128.4458 288.8257 135.6362 310.1606 135.8638 310.6685 c136.8247 312.8032 139.3394 313.7603 141.4731 312.8032 c143.6069 311.8462 144.563 309.3315 143.605 307.1958 c143.3784 306.6909 132.3003 287.0874 125.854 275.687 C126.4595 275.3481 127.0464 274.9585 127.5776 274.4819 C138.3608 288.0278 139.4272 288.9897 v141.1655 290.5542 143.853 290.4165 145.4194 288.6763 c146.9839 286.939 146.8423 284.2524 145.105 282.6851 c144.0327 281.7183 129.3843 272.311 Y129.8413 271.562 130.1851 270.769 130.4214 269.9487 C157.2295 279.3032 158.8291 279.6558 v160.3174 279.9839 161.8779 279.4829 162.8994 278.3501 c163.3857 277.8081 163.7275 277.1431 163.8838 276.4272 c164.3877 274.1431 162.9404 271.8745 160.6553 271.3696 c159.0518 271.0181 130.771 268.0835 Y130.896 266.6372 130.7036 265.1714 130.189 263.8003 C152.2207 252.6401 153.2246 251.9985 v153.5488 251.7915 153.8438 251.5415 154.0986 251.2563 c155.3682 249.8462 155.5439 247.7427 154.5205 246.1401 c153.9131 245.1851 152.9648 244.5239 151.8594 244.2769 c150.7539 244.0347 149.6191 244.2349 148.6621 244.8462 c147.6543 245.4888 127.9478 260.3423 Y127.8354 260.229 127.7261 260.1108 127.605 260.0015 c127.2876 259.7173 126.9526 259.4692 126.6113 259.2349 C133.7144 247.8726 145.4985 229.0249 145.7495 228.5396 c146.813 226.4546 145.9868 223.8931 143.9048 222.8276 cf125.7842 262.0239 m128.6577 264.6099 128.8882 269.0513 126.3027 271.9243 c123.7139 274.7983 119.271 275.0298 116.3994 272.4438 c113.5254 269.855 113.2925 265.4126 115.8823 262.5386 c118.4683 259.6655 122.9106 259.4351 125.7842 262.0239 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.720058 0 0.260746 0 0 0.729412 0.776471 Xa 0.720058 0 0.260746 0 0 0.729412 0.776471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR438.3076 323.7485 m437.2646 320.8423 434.0527 319.3247 431.1396 320.3696 c430.4658 320.6118 414.5605 329.3364 398.5557 336.9731 C398.1045 335.9282 397.5342 334.9438 396.8369 334.0688 C443.2588 285.0269 444.4092 283.6616 v445.3721 282.519 445.833 281.0679 445.708 279.5776 c445.5811 278.0815 444.8818 276.7339 443.7393 275.7671 c442.5938 274.8022 441.1436 274.3413 439.6514 274.4663 c438.1611 274.5933 436.8066 275.2944 435.8408 276.4351 c434.6992 277.7944 393.583 331.1665 Y392.4053 330.4302 391.1084 329.8735 389.7295 329.5454 C390.8174 298.6284 390.7783 297.0796 v390.7393 295.5835 390.1182 294.1929 389.0322 293.1616 c387.9502 292.1304 386.5273 291.5874 385.0313 291.6226 c384.9189 291.6304 384.8096 291.6323 384.7002 291.6421 c381.7471 291.8901 379.4971 294.4097 379.5732 297.3687 c379.6143 298.9038 384.1045 329.4829 Y382.9795 329.7192 381.9141 330.0962 380.9248 330.606 C355.7344 286.2261 354.5166 284.4565 v353.377 282.8062 351.4268 281.8862 349.4268 282.0581 c348.46 282.1401 347.5244 282.4761 346.7217 283.0308 c345.4912 283.8823 344.6611 285.1597 344.3945 286.6323 c344.124 288.105 344.4453 289.5933 345.2939 290.8257 c346.5146 292.5874 378.749 332.0063 Y378.3242 332.3501 377.9268 332.729 377.5479 333.1216 C367.3564 322.354 352.085 306.2437 351.2393 305.5308 c348.876 303.5386 345.3369 303.8354 343.3428 306.1968 c341.3516 308.5562 341.6514 312.0972 344.0117 314.0903 c344.8604 314.8032 363.4346 327.2329 375.7666 335.4673 C375.6416 335.6763 375.5068 335.8833 375.3916 336.1001 C329.9189 317.8716 328.1748 317.3149 v327.4658 317.0864 326.7314 317.0024 325.9941 317.0669 c323.7314 317.2583 321.8203 318.7759 321.1299 320.9399 c320.6738 322.3638 320.7988 323.8833 321.4814 325.2114 c322.167 326.5435 323.3301 327.5278 324.7549 327.9849 c326.4971 328.5435 374.0977 339.979 Y373.9326 340.9985 373.874 342.0532 373.9639 343.1294 c373.9893 343.4224 374.0371 343.7095 374.0811 343.9946 C336.5654 350.6294 334.6826 351.1646 v331.7139 352.0083 329.9834 355.1118 330.8271 358.0845 c331.5586 360.6577 334.0205 362.3647 336.6826 362.1392 c337.04 362.1089 337.3994 362.0454 337.7471 361.9458 c339.6299 361.4106 375.0615 347.313 Y375.7314 348.7935 376.6689 350.1235 377.8135 351.2368 C333.7188 397.5444 332.335 399.1821 v331.3691 400.3267 330.9082 401.7778 331.0342 403.2681 c331.1611 404.7612 331.8594 406.1128 333.0029 407.0776 c334.1494 408.0425 335.5986 408.5063 337.0889 408.3804 c338.5801 408.2534 339.9336 407.5522 340.8975 406.4087 c342.2852 404.7681 379.8408 352.8442 Y380.3799 353.1919 380.9502 353.4888 381.5342 353.7524 C374.3486 369.4917 362.0068 396.5464 361.7695 397.2407 c360.7646 400.1636 362.3252 403.3589 365.2451 404.3628 c368.167 405.3677 371.3604 403.8091 372.3652 400.8843 c372.6025 400.1948 379.6357 371.2983 383.7217 354.4888 C384.6104 354.7095 385.5264 354.8677 386.4707 354.8872 C385.3604 385.9722 385.5205 387.8628 v385.7803 390.9419 388.4961 393.2349 391.5771 392.9731 c394.6533 392.7124 396.9463 389.9956 396.6855 386.9175 c396.5244 385.0171 390.1709 354.4263 Y391.2881 354.1196 392.335 353.6626 393.3057 353.0884 C419.6768 399.4282 420.9004 401.2134 v422.0361 402.8745 423.9932 403.8003 426.001 403.6304 c426.959 403.5493 427.8877 403.2163 428.6875 402.6694 c431.2354 400.9224 431.8916 397.4282 430.1426 394.8794 c428.9189 393.0923 395.3242 351.606 Y396.7529 350.3247 397.8906 348.7388 398.6357 346.9517 C443.6641 358.7466 445.2119 359.0356 v445.7119 359.1274 446.2197 359.1528 446.7217 359.1099 c449.2207 358.8989 451.29 357.0298 451.75 354.561 c452.0273 353.0903 451.7129 351.6001 450.8691 350.3618 c450.0234 349.1294 448.748 348.2974 447.2764 348.022 c445.7236 347.729 399.5986 341.5981 Y399.5908 341.3853 399.5928 341.1743 399.5732 340.9595 c399.5264 340.3989 399.4277 339.8579 399.3115 339.3208 C416.4189 334.7935 434.2451 331.1606 434.9248 330.9185 c437.835 329.8696 439.3525 326.6587 438.3076 323.7485 cf395.9971 341.2622 m396.4277 346.3481 392.6387 350.8384 387.5518 351.27 c382.4629 351.7017 377.9717 347.9106 377.542 342.8247 c377.1104 337.7349 380.8994 333.2446 385.9883 332.813 c391.0752 332.3813 395.5654 336.1704 395.9971 341.2622 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR382.8633 332.7329 m380.5645 336.7056 381.918 341.8091 385.8955 344.1157 c386.8164 344.6489 410.5762 353.7056 434.5879 364.5669 C433.833 366.0815 433.2656 367.6714 432.9375 369.3052 C345.1934 363.5806 342.541 363.5806 v340.3164 363.5806 338.2266 364.4478 336.6533 366.02 c335.0781 367.5952 334.2129 369.6841 334.2129 371.9067 c334.2158 374.1333 335.0791 376.2241 336.6543 377.7993 c338.2266 379.3706 340.3203 380.2368 342.543 380.2378 c345.1816 380.2339 432.7617 375.7808 Y433.0508 377.8257 433.6621 379.8325 434.6113 381.7134 C398.4492 410.1108 396.7275 411.6421 v395.0645 413.1177 394.0811 415.1567 393.9502 417.3765 c393.8164 419.5962 394.5625 421.7349 396.0381 423.397 c396.1523 423.522 396.2617 423.6431 396.377 423.7593 c399.4902 426.8716 404.5078 427.0142 407.7969 424.0903 c409.5 422.5718 439.9316 388.1626 Y441.2783 389.2134 442.7285 390.062 444.2578 390.6978 C417.9873 461.8501 417.1465 464.9302 v416.3633 467.8071 417.1875 470.9019 419.2979 473.0122 c420.3184 474.0317 421.5957 474.772 422.9971 475.1528 c425.1445 475.7358 427.3906 475.4507 429.3184 474.3452 c431.252 473.2388 432.6348 471.4478 433.2207 469.3013 c434.0547 466.2261 447.9316 391.8247 Y448.7305 391.981 449.541 392.0679 450.3516 392.1206 C447.8887 414.019 444.2246 446.8101 444.2246 448.4546 c444.2256 453.0474 447.958 456.7856 452.5498 456.7856 c457.1416 456.7856 460.877 453.0493 460.877 448.4575 c460.875 446.811 457.1895 413.7974 454.7227 391.896 C455.082 391.8364 455.4453 391.7925 455.8008 391.7153 C478.6807 460.8423 479.7197 463.3569 v480.1416 464.3813 480.749 465.2974 481.5273 466.0737 c483.9141 468.4595 487.4707 469.1743 490.5889 467.8862 c492.6455 467.0396 494.251 465.4429 495.1045 463.3911 c495.9619 461.3354 495.9639 459.0728 495.1182 457.0151 c494.083 454.4985 461.4463 389.4683 Y462.7646 388.6772 464.0186 387.7358 465.1533 386.6011 c465.4639 386.2915 465.7412 385.9614 466.0244 385.6372 C509.5205 421.895 511.9326 423.519 v515.7373 426.0845 520.9248 425.0737 523.4912 421.2661 c525.7119 417.9683 525.29 413.5376 522.4814 410.729 c522.1045 410.353 521.6885 410.0054 521.2412 409.7046 c518.8291 408.0806 468.8525 381.3433 Y469.8955 379.1606 470.5068 376.8237 470.6729 374.4585 C549.1514 380.1587 552.3369 380.1616 v554.5615 380.1616 556.6533 379.2935 558.2236 377.7222 c559.7998 376.147 560.6671 374.0581 560.665 371.8345 c560.6631 369.6079 559.7998 367.5161 558.2295 365.9448 c556.6553 364.3735 554.5615 363.5073 552.3389 363.5073 c549.1455 363.5044 470.5557 370.6128 Y470.4346 369.6685 470.2256 368.7368 469.9639 367.8169 C494.7314 360.895 537.2939 348.981 538.3096 348.5864 c542.5928 346.9243 544.7275 342.0903 543.0693 337.811 c541.4111 333.5298 536.5791 331.397 532.2921 333.0571 c531.2822 333.4478 491.7158 353.1567 468.708 364.6265 C468.1045 363.4048 467.4033 362.2163 466.5225 361.1235 C502.8975 332.5903 504.8916 330.5942 v508.1396 327.3481 508.1416 322.0649 504.8916 318.8169 c501.6475 315.5708 496.3643 315.5728 493.1162 318.8188 c491.1123 320.8247 462.4521 357.3618 Y461.0322 356.3872 459.5107 355.6353 457.9287 355.0845 C480.5537 298.9136 481.4072 295.812 v482.207 292.9292 481.3818 289.8198 479.2627 287.7007 c478.2529 286.6909 476.9854 285.9546 475.5967 285.5698 c471.1689 284.3511 466.5732 286.9546 465.3525 291.3843 c464.4971 294.4878 454.3096 354.2095 Y451.4844 353.8169 448.5918 354.0435 445.8496 354.9106 C416.0859 292.4585 414.9316 290.4214 v414.5586 289.7651 414.0996 289.1636 413.5703 288.6343 c410.9355 285.9995 406.8271 285.439 403.5801 287.2847 c401.6465 288.3784 400.2539 290.1655 399.6563 292.3081 c399.0664 294.4507 399.3447 296.6968 400.4434 298.6343 c401.5977 300.6753 438.8457 358.9497 Y438.6104 359.1606 438.3672 359.3638 438.1416 359.5884 c437.5508 360.1802 437.0293 360.811 436.5332 361.4575 C414.9922 346.3657 395.1768 330.2446 394.25 329.7056 c390.2715 327.4048 385.167 328.7603 382.8633 332.7329 cf441.9141 363.3618 m447.2793 357.9966 456.0137 357.9966 461.3779 363.3618 c466.7471 368.731 466.7451 377.4644 461.3799 382.8286 c456.0117 388.1968 447.2803 388.1968 441.9111 382.8286 c436.5469 377.4644 436.5459 368.731 441.9141 363.3618 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 Xa 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR562.3193 277.98 m559.4287 275.9917 555.458 276.7222 553.4639 279.6167 c553.0029 280.2866 536.958 309.4741 527.2568 327.1343 C526.1475 326.4692 524.9678 325.9419 523.7432 325.5952 C530.6709 292.9194 530.8291 290.8979 v530.96 289.2026 530.4229 287.5581 529.3174 286.2671 c528.21 284.9722 526.6689 284.189 524.9736 284.0581 c523.2783 283.9272 521.6318 284.4624 520.3389 285.5698 c519.0498 286.6733 518.2646 288.2183 518.1299 289.9136 c517.9775 291.9253 518.8174 325.0767 Y517.2412 325.1782 515.6768 325.5239 514.1865 326.1372 C494.6807 296.8901 493.6162 295.4878 v492.5889 294.1323 491.0928 293.2612 489.4092 293.0308 c487.7246 292.7983 486.0508 293.2397 484.6953 294.2671 c484.5957 294.3452 484.4961 294.4214 484.3984 294.5034 c481.8438 296.6909 481.4365 300.5073 483.4727 303.189 c484.5293 304.5757 508.9541 329.8091 Y508.0732 330.7739 507.3408 331.8296 506.7646 332.9575 C454.0869 308.7183 451.7881 307.896 v449.6416 307.1284 447.2344 307.5737 445.501 309.0562 c444.6631 309.7749 444.0225 310.7065 443.6494 311.7495 c443.0771 313.3521 443.1631 315.0815 443.8896 316.6157 c444.6201 318.1558 445.9043 319.3149 447.5039 319.8892 c449.7979 320.7085 505.6885 335.6899 Y505.5225 336.2896 505.4092 336.9019 505.3193 337.5181 C488.7744 334.3433 463.9971 329.6099 462.7432 329.5122 c459.2422 329.2407 456.1709 331.8638 455.8994 335.3638 c455.6279 338.8647 458.2549 341.9331 461.7549 342.2046 c463.0088 342.3013 488.3936 341.4448 505.2314 340.8657 C505.2568 341.1411 505.2686 341.4185 505.3076 341.6958 C477.0361 346.7153 475.0576 347.3599 v474.251 347.6226 473.5186 348.0298 472.8799 348.5757 c470.9189 350.2554 470.165 352.9233 470.9619 355.3774 c471.4854 356.9946 472.6084 358.314 474.1201 359.0864 c475.6377 359.8618 477.3604 359.9966 478.9795 359.4741 c480.96 358.8335 506.6846 346.1343 Y507.21 347.1841 507.8525 348.1958 508.6494 349.1274 c508.8682 349.3833 509.1045 349.6128 509.333 349.8481 C479.1221 380.855 477.7393 382.5991 v475.5596 385.3472 476.0225 389.3618 478.7744 391.5444 c481.1553 393.4292 484.5566 393.3735 486.8633 391.397 c487.1738 391.1304 487.4629 390.8364 487.7188 390.5142 c489.0986 388.77 512.4424 352.2612 Y514.0421 353.1821 515.7861 353.7886 517.5791 354.0542 C510.3213 391.2192 510.1318 393.6479 v509.999 395.3452 510.5361 396.9897 511.6416 398.2788 c512.749 399.5737 514.29 400.3589 515.9854 400.4878 c517.6826 400.6187 519.3271 400.0864 520.6182 398.979 c521.9092 397.8755 522.6943 396.3306 522.8271 394.6353 c523.0166 392.2017 520.5186 354.1929 Y521.2471 354.1548 521.9678 354.0522 522.6865 353.9067 C526.4951 373.1958 533.0537 406.3433 533.2939 407.1421 c534.3096 410.5063 537.8662 412.4185 541.2275 411.4087 c544.5889 410.3979 546.501 406.8423 545.4893 403.4771 c545.251 402.6821 532.5713 371.356 525.1904 353.1392 C526.1572 352.7524 527.1064 352.2866 527.9912 351.6802 C541.4072 373.9331 542.8076 375.5718 v545.0908 378.2388 549.1162 378.5542 551.7861 376.269 c554.4521 373.9878 554.7627 369.9614 552.4814 367.2925 c551.0713 365.646 531.1006 348.8003 Y531.9268 347.7749 532.5908 346.6597 533.1025 345.4868 C571.1826 364.6128 573.4951 365.4497 v575.6436 366.2271 578.0635 365.7847 579.8037 364.2964 c580.6338 363.5854 581.2705 362.6616 581.6436 361.6255 c582.835 358.3237 581.124 354.6665 577.8193 353.4731 c575.5049 352.6372 533.9834 342.7798 Y534.4521 340.6499 534.4502 338.4321 533.9502 336.2905 C568.9033 323.9604 570.5244 323.1997 v571.0459 322.9546 571.5342 322.6411 571.9678 322.2671 c574.1318 320.4155 574.8018 317.3179 573.5889 314.7339 c572.8701 313.1958 571.5889 312.0269 569.9912 311.4468 c568.3936 310.8706 566.665 310.9487 565.124 311.6694 c563.4971 312.4312 531.2861 330.7104 Y531.1416 330.52 530.999 330.3237 530.8408 330.1362 c530.4248 329.6519 529.9756 329.2173 529.5127 328.8013 C542.29 313.2739 563.4873 287.5132 563.9521 286.8394 c565.9424 283.9409 565.21 279.9702 562.3193 277.98 cf527.7412 332.7905 m531.5127 337.1978 530.9951 343.854 526.5889 347.6255 c522.1787 351.3999 515.5225 350.8833 511.751 346.4761 c507.9756 342.0659 508.4932 335.4087 512.9033 331.6343 c517.3115 327.8628 523.9678 328.3804 527.7412 332.7905 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.720058 0 0.260746 0 0 0.729412 0.776471 Xa 0.720058 0 0.260746 0 0 0.729412 0.776471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR271.2012 228.6587 m270.1577 225.7524 266.9463 224.2349 264.0332 225.2798 c263.3599 225.522 247.4541 234.2466 231.4497 241.8833 C230.9985 240.8384 230.4272 239.854 229.73 238.979 C276.1519 189.937 277.3022 188.5718 v278.2656 187.4292 278.7271 185.978 278.6011 184.4878 c278.4746 182.9917 277.7759 181.644 276.6333 180.6772 c275.4873 179.7124 274.0371 179.2515 272.5444 179.3765 c271.0542 179.5034 269.7002 180.2046 268.7339 181.3452 c267.5928 182.7046 226.4766 236.0767 Y225.2993 235.3403 224.0015 234.7837 222.6235 234.4556 C223.7104 203.5386 223.6714 201.9897 v223.6323 200.4937 223.0112 199.103 221.9258 198.0718 c220.8433 197.0405 219.4209 196.4976 217.9248 196.5327 c217.812 196.5405 217.7026 196.5425 217.5933 196.5522 c214.6406 196.8003 212.3901 199.3198 212.4663 202.2788 c212.5083 203.814 216.998 234.3931 Y215.873 234.6294 214.8076 235.0063 213.8179 235.5161 C188.6279 191.1362 187.4102 189.3667 v186.2705 187.7163 184.3203 186.7964 182.3203 186.9683 c181.353 187.0503 180.4185 187.3862 179.6152 187.9409 c178.3843 188.7925 177.5552 190.0698 177.2881 191.5425 c177.0171 193.0151 177.3389 194.5034 178.188 195.7358 c179.4077 197.4976 211.6431 236.9165 Y211.2178 237.2603 210.8203 237.6392 210.4419 238.0317 C200.2505 227.2642 184.9785 211.1538 184.1323 210.4409 c181.77 208.4487 178.23 208.7456 176.2368 211.1069 c174.2451 213.4663 174.5449 217.0073 176.9053 219.0005 c177.7539 219.7134 196.3281 232.1431 208.6606 240.3774 C208.5356 240.5864 208.4004 240.7935 208.2856 241.0103 C162.813 222.7817 161.0684 222.2251 v160.3589 221.9966 159.6245 221.9126 158.8877 221.9771 c156.6255 222.1685 154.7139 223.686 154.0234 225.8501 c153.5674 227.2739 153.6924 228.7935 154.375 230.1216 c155.0601 231.4536 156.2236 232.438 157.6479 232.895 c159.3911 233.4536 206.9912 244.8892 Y206.8267 245.9087 206.7671 246.9634 206.8579 248.0396 c206.8828 248.3325 206.9307 248.6196 206.9741 248.9048 C169.459 255.5396 167.5757 256.0747 v164.6069 256.9185 162.8765 260.022 163.7202 262.9946 c164.4521 265.5679 166.9136 267.2749 169.5757 267.0493 c169.9336 267.019 170.293 266.9556 170.6411 266.856 c172.5229 266.3208 207.9551 252.2231 Y208.6255 253.7036 209.562 255.0337 210.7065 256.147 C166.6123 302.4546 165.228 304.0923 v164.2627 305.2368 163.8018 306.688 163.9277 308.1782 c164.0542 309.6714 164.7529 311.0229 165.897 311.9878 c167.043 312.9526 168.4917 313.4165 169.9824 313.2905 c171.4736 313.1636 172.8271 312.4624 173.791 311.3188 c175.1787 309.6782 212.7344 257.7544 Y213.2734 258.1021 213.8438 258.3989 214.4282 258.6626 C207.2427 274.4019 194.9004 301.4565 194.6631 302.1509 c193.6582 305.0737 195.2188 308.269 198.1387 309.2729 c201.0601 310.2778 204.2544 308.7192 205.2588 305.7944 c205.4961 305.105 212.5293 276.2085 216.6152 259.3989 C217.5044 259.6196 218.4194 259.7778 219.3643 259.7974 C218.2534 290.8823 218.4136 292.7729 v218.6743 295.8521 221.3896 298.145 224.4702 297.8833 c227.5474 297.6226 229.8398 294.9058 229.5791 291.8276 c229.418 289.9272 223.0645 259.3364 Y224.1816 259.0298 225.229 258.5728 226.1997 257.9985 C252.5708 304.3384 253.7939 306.1235 v254.9302 307.7847 256.8862 308.7104 258.895 308.5405 c259.8525 308.4595 260.7808 308.1265 261.5811 307.5796 c264.1284 305.8325 264.7852 302.3384 263.0361 299.7896 c261.813 298.0024 228.2178 256.5161 Y229.6465 255.2349 230.7842 253.6489 231.5288 251.8618 C276.5576 263.6567 278.105 263.9458 v278.6055 264.0376 279.1128 264.063 279.6152 264.02 c282.1143 263.8091 284.1841 261.9399 284.6436 259.4712 c284.9209 258.0005 284.6064 256.5103 283.7627 255.272 c282.917 254.0396 281.6416 253.2075 280.1699 252.9321 c278.6177 252.6392 232.4917 246.5083 Y232.4839 246.2954 232.4858 246.0845 232.4673 245.8696 c232.4199 245.3091 232.3213 244.7681 232.2051 244.231 C249.312 239.7036 267.1392 236.0708 267.8184 235.8286 c270.728 234.7798 272.2461 231.5688 271.2012 228.6587 cf228.8901 246.1724 m229.3213 251.2583 225.5322 255.7485 220.4448 256.1802 c215.3564 256.6118 210.8657 252.8208 210.4351 247.7349 c210.0034 242.645 213.793 238.1548 218.8818 237.7231 c223.9688 237.2915 228.459 241.0806 228.8901 246.1724 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR215.7568 237.6431 m213.458 241.6157 214.8115 246.7192 218.7891 249.0259 c219.71 249.5591 243.4697 258.6157 267.4814 269.4771 C266.7266 270.9917 266.1592 272.5815 265.8311 274.2153 C178.0869 268.4907 175.4346 268.4907 v173.21 268.4907 171.1201 269.3579 169.5474 270.9302 c167.9717 272.5054 167.1064 274.5942 167.1064 276.8169 c167.1094 279.0435 167.9731 281.1343 169.5479 282.7095 c171.1201 284.2808 173.2139 285.147 175.4365 285.1479 c178.0752 285.144 265.6553 280.6909 Y265.9443 282.7358 266.5557 284.7427 267.5049 286.6235 C231.3428 315.021 229.6211 316.5522 v227.958 318.0278 226.9746 320.0669 226.8438 322.2866 c226.71 324.5063 227.4561 326.645 228.9316 328.3071 c229.0459 328.4321 229.1553 328.5532 229.2705 328.6694 c232.3838 331.7817 237.4014 331.9243 240.6904 329.0005 c242.3936 327.4819 272.8252 293.0728 Y274.1719 294.1235 275.6221 294.9722 277.1514 295.6079 C250.8809 366.7603 250.04 369.8403 v249.2568 372.7173 250.0811 375.812 252.1914 377.9224 c253.2119 378.9419 254.4893 379.6821 255.8906 380.063 c258.0381 380.646 260.2842 380.3608 262.2119 379.2554 c264.1455 378.1489 265.5283 376.3579 266.1143 374.2114 c266.9482 371.1362 280.8252 296.7349 Y281.624 296.8911 282.4346 296.978 283.2451 297.0308 C280.7822 318.9292 277.1182 351.7202 277.1182 353.3647 c277.1191 357.9575 280.8516 361.6958 285.4434 361.6958 c290.0352 361.6958 293.7705 357.9595 293.7705 353.3677 c293.7686 351.7212 290.083 318.7075 287.6162 296.8062 C287.9756 296.7466 288.3389 296.7026 288.6943 296.6255 C311.5747 365.7524 312.6138 368.2671 v313.0356 369.2915 313.6431 370.2075 314.4209 370.9839 c316.8076 373.3696 320.3643 374.0845 323.4824 372.7964 c325.5391 371.9497 327.1445 370.353 327.998 368.3013 c328.8555 366.2456 328.8574 363.9829 328.0117 361.9253 c326.9766 359.4087 294.3403 294.3784 Y295.6587 293.5874 296.9126 292.646 298.0474 291.5112 c298.3579 291.2017 298.6353 290.8716 298.9185 290.5474 C342.4141 326.8052 344.8262 328.4292 v348.6309 330.9946 353.8184 329.9839 356.3848 326.1763 c358.6055 322.8784 358.1836 318.4478 355.375 315.6392 c354.998 315.2632 354.582 314.9155 354.1348 314.6147 c351.7227 312.9907 301.7466 286.2534 Y302.7896 284.0708 303.4009 281.7339 303.5669 279.3687 C382.0449 285.0688 385.2305 285.0718 v387.4551 285.0718 389.5469 284.2036 391.1172 282.6323 c392.6934 281.0571 393.5605 278.9683 393.5586 276.7446 c393.5566 274.5181 392.6934 272.4263 391.123 270.855 c389.5488 269.2837 387.4551 268.4175 385.2324 268.4175 c382.0391 268.4146 303.4497 275.5229 Y303.3286 274.5786 303.1196 273.647 302.8579 272.7271 C327.625 265.8052 370.1875 253.8911 371.2031 253.4966 c375.4863 251.8345 377.6211 247.0005 375.9629 242.7212 c374.3047 238.4399 369.4727 236.3071 365.1855 237.9673 c364.1758 238.3579 324.6094 258.0669 301.6021 269.5366 C300.9985 268.3149 300.2974 267.1265 299.4165 266.0337 C335.791 237.5005 337.7852 235.5044 v341.0332 232.2583 341.0352 226.9751 337.7852 223.7271 c334.541 220.481 329.2578 220.4829 326.0098 223.729 c324.0059 225.7349 295.3462 262.272 Y293.9263 261.2974 292.4043 260.5454 290.8223 259.9946 C313.4478 203.8237 314.3013 200.7222 v315.1006 197.8394 314.2759 194.73 312.1567 192.6108 c311.147 191.6011 309.8794 190.8647 308.4907 190.48 c304.063 189.2612 299.4673 191.8647 298.2466 196.2944 c297.3911 199.3979 287.2031 259.1196 Y284.3779 258.7271 281.4854 258.9536 278.7432 259.8208 C248.9795 197.3687 247.8252 195.3315 v247.4521 194.6753 246.9932 194.0737 246.4639 193.5444 c243.8291 190.9097 239.7207 190.3491 236.4736 192.1948 c234.54 193.2886 233.1475 195.0757 232.5498 197.2183 c231.96 199.3608 232.2383 201.6069 233.3369 203.5444 c234.4912 205.5854 271.7393 263.8599 Y271.5039 264.0708 271.2607 264.2739 271.0352 264.4985 c270.4443 265.0903 269.9229 265.7212 269.4268 266.3677 C247.8857 251.2759 228.0703 235.1548 227.1436 234.6157 c223.165 232.3149 218.0605 233.6704 215.7568 237.6431 cf274.8076 268.272 m280.1729 262.9067 288.9072 262.9067 294.272 268.272 c299.6411 273.6411 299.6392 282.3745 294.2739 287.7388 c288.9053 293.1069 280.1738 293.1069 274.8047 287.7388 c269.4404 282.3745 269.4395 273.6411 274.8076 268.272 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 Xa 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR395.2129 182.8901 m392.3223 180.9019 388.3516 181.6323 386.3574 184.5269 c385.8965 185.1968 369.8516 214.3843 360.1504 232.0444 C359.041 231.3794 357.8613 230.8521 356.6367 230.5054 C363.5645 197.8296 363.7227 195.8081 v363.8535 194.1128 363.3164 192.4683 362.2109 191.1772 c361.1035 189.8823 359.5625 189.0991 357.8672 188.9683 c356.1719 188.8374 354.5254 189.3726 353.2324 190.48 c351.9434 191.5835 351.1582 193.1284 351.0234 194.8237 c350.8711 196.8354 351.7109 229.9868 Y350.1348 230.0884 348.5703 230.4341 347.0801 231.0474 C327.5742 201.8003 326.5098 200.3979 v325.4824 199.0425 323.9863 198.1714 322.3027 197.9409 c320.6182 197.7085 318.9443 198.1499 317.5889 199.1772 c317.4893 199.2554 317.3896 199.3315 317.292 199.4136 c314.7373 201.6011 314.3306 205.4175 316.3662 208.0991 c317.4229 209.4858 341.8477 234.7192 Y340.9668 235.6841 340.2344 236.7397 339.6582 237.8677 C286.9805 213.6284 284.6816 212.8062 v282.5356 212.0386 280.1279 212.4839 278.394 213.9663 c277.5562 214.6851 276.9165 215.6167 276.5425 216.6597 c275.9712 218.2622 276.0562 219.9917 276.7837 221.5259 c277.5137 223.0659 278.7979 224.2251 280.3975 224.7993 c282.6919 225.6187 338.582 240.6001 Y338.416 241.1997 338.3027 241.812 338.2129 242.4282 C321.668 239.2534 296.8901 234.52 295.6372 234.4224 c292.1357 234.1509 289.0649 236.7739 288.7935 240.2739 c288.5215 243.7749 291.1484 246.8433 294.6479 247.1147 c295.9028 247.2114 321.2871 246.355 338.125 245.7759 C338.1504 246.0513 338.1621 246.3286 338.2012 246.606 C309.9292 251.6255 307.9517 252.27 v307.145 252.5327 306.4116 252.9399 305.7729 253.4858 c303.813 255.1655 303.0581 257.8335 303.855 260.2876 c304.3794 261.9048 305.5024 263.2241 307.0132 263.9966 c308.5308 264.772 310.2544 264.9067 311.8726 264.3843 c313.854 263.7437 339.5781 251.0444 Y340.1035 252.0942 340.7461 253.106 341.543 254.0376 c341.7617 254.2935 341.998 254.5229 342.2266 254.7583 C312.0151 285.7651 310.6333 287.5093 v308.4536 290.2573 308.9165 294.272 311.6675 296.4546 c314.0493 298.3394 317.4502 298.2837 319.7568 296.3071 c320.0674 296.0405 320.3564 295.7466 320.6123 295.4243 c321.9922 293.6802 345.3359 257.1714 Y346.9355 258.0923 348.6797 258.6987 350.4727 258.9644 C343.2148 296.1294 343.0254 298.5581 v342.8926 300.2554 343.4297 301.8999 344.5352 303.189 c345.6426 304.4839 347.1836 305.269 348.8789 305.3979 c350.5762 305.5288 352.2207 304.9966 353.5117 303.8892 c354.8027 302.7856 355.5879 301.2407 355.7207 299.5454 c355.9102 297.1118 353.4121 259.103 Y354.1406 259.0649 354.8613 258.9624 355.5801 258.8169 C359.3887 278.106 365.9473 311.2534 366.1875 312.0522 c367.2031 315.4165 370.7598 317.3286 374.1211 316.3188 c377.4824 315.3081 379.3945 311.7524 378.3828 308.3872 c378.1445 307.5923 365.4648 276.2661 358.084 258.0493 C359.0508 257.6626 360 257.1968 360.8848 256.5903 C374.3008 278.8433 375.7012 280.4819 v377.9844 283.1489 382.0098 283.4644 384.6797 281.1792 c387.3457 278.8979 387.6563 274.8716 385.375 272.2026 c383.9648 270.5562 363.9941 253.7104 Y364.8203 252.6851 365.4844 251.5698 365.9961 250.397 C404.0762 269.5229 406.3887 270.3599 v408.5371 271.1372 410.957 270.6948 412.6973 269.2065 c413.5273 268.4956 414.1641 267.5718 414.5371 266.5356 c415.7285 263.2339 414.0176 259.5767 410.7129 258.3833 c408.3984 257.5474 366.877 247.6899 Y367.3457 245.5601 367.3438 243.3423 366.8438 241.2007 C401.7969 228.8706 403.418 228.1099 v403.9395 227.8647 404.4277 227.5513 404.8613 227.1772 c407.0254 225.3257 407.6953 222.228 406.4824 219.644 c405.7637 218.106 404.4824 216.937 402.8848 216.3569 c401.2871 215.7808 399.5586 215.8589 398.0176 216.5796 c396.3906 217.3413 364.1797 235.6206 Y364.0352 235.4302 363.8926 235.2339 363.7344 235.0464 c363.3184 234.562 362.8691 234.1274 362.4063 233.7114 C375.1836 218.1841 396.3809 192.4233 396.8457 191.7495 c398.8359 188.8511 398.1035 184.8804 395.2129 182.8901 cf360.6348 237.7007 m364.4063 242.1079 363.8887 248.7642 359.4824 252.5356 c355.0723 256.3101 348.416 255.7935 344.6445 251.3862 c340.8691 246.9761 341.3867 240.3188 345.7969 236.5444 c350.2051 232.7729 356.8613 233.2905 360.6348 237.7007 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa 0 0.946044 0.854887 0 0.929412 0.109804 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR311.0112 317.9175 m308.9302 316.853 306.3687 317.6772 305.3013 319.7612 c305.0562 320.2446 296.9712 340.9126 292.0835 353.4165 C291.2935 353.0737 290.4673 352.8267 289.6289 352.7026 C291.3901 330.5171 291.3198 329.1675 v291.2603 328.0356 290.7632 326.9946 289.9219 326.2378 c289.0791 325.478 287.9927 325.0933 286.8608 325.1528 c285.7295 325.2134 284.688 325.7075 283.9297 326.5503 c283.1724 327.3911 282.7871 328.48 282.8447 329.6128 c282.917 330.9546 286.3306 352.7847 Y285.2988 352.9888 284.293 353.3521 283.3613 353.8853 C267.9531 336.2437 267.1284 335.4067 v266.333 334.6011 265.27 334.1548 264.1372 334.1479 c263.0029 334.1392 261.9355 334.5747 261.1289 335.3687 c261.0698 335.4312 261.0103 335.4897 260.9541 335.5532 c259.4551 337.2183 259.5146 339.7739 261.0898 341.3706 c261.9082 342.1968 280.2207 356.7622 Y279.7227 357.4761 279.3306 358.2358 279.0464 359.0317 C242.1514 347.5581 240.5615 347.2124 v239.0786 346.8911 237.5254 347.3921 236.5078 348.522 c236.0166 349.0679 235.6738 349.7378 235.5161 350.4595 c235.2778 351.5688 235.4829 352.7036 236.0962 353.6558 c236.7104 354.6089 237.6592 355.2642 238.7661 355.5063 c240.3521 355.8491 278.5708 360.9302 Y278.5142 361.3394 278.4902 361.7544 278.4854 362.1694 C267.2793 361.4976 250.5005 360.5063 249.6641 360.5503 c247.3271 360.6733 245.5239 362.6694 245.6465 365.0063 c245.769 367.3423 247.7695 369.145 250.1045 369.022 c250.9424 368.9771 267.6392 366.2222 278.7148 364.3882 C278.7563 364.5679 278.7866 364.7505 278.8359 364.9302 C260.5903 370.6841 259.3384 371.2798 v258.8286 371.5239 258.3799 371.856 258.0039 372.272 c256.8545 373.5503 256.5854 375.3774 257.3232 376.9312 c257.8101 377.9546 258.665 378.729 259.73 379.1099 c260.7998 379.4907 261.9502 379.4312 262.9741 378.9468 c264.2285 378.3521 280.1294 367.7437 Y280.5669 368.3921 281.0781 369.0063 281.686 369.5522 c281.8521 369.7026 282.0278 369.8335 282.1997 369.9692 C264.9116 393.061 264.1484 394.3325 v262.9458 396.3354 263.5981 398.9487 265.6035 400.1528 c267.3398 401.1938 269.582 400.8628 270.9355 399.3579 c271.1172 399.1558 271.2837 398.936 271.4243 398.7017 c272.1865 397.4292 284.4619 371.2964 Y285.5981 371.7661 286.8037 372.0171 288.0098 372.0386 C286.4185 397.2192 286.5029 398.8394 v286.5615 399.9722 287.0591 401.0122 287.9004 401.769 c288.7432 402.5288 289.8291 402.9146 290.96 402.854 c292.0928 402.7944 293.1333 402.3013 293.8911 401.4575 c294.6489 400.6167 295.0356 399.5288 294.9761 398.3979 c294.8921 396.7729 289.9648 371.8755 Y290.4414 371.7876 290.9092 371.6567 291.3716 371.4995 C295.5522 383.9155 302.7427 405.2505 302.9702 405.7583 c303.9312 407.8931 306.4458 408.8501 308.5796 407.8931 c310.7134 406.936 311.6694 404.4214 310.7114 402.2856 c310.4849 401.7808 299.4067 382.1772 292.9604 370.7769 C293.5659 370.438 294.1528 370.0483 294.6841 369.5718 C305.4673 383.1177 306.5337 384.0796 v308.272 385.644 310.9595 385.5063 312.5259 383.7661 c314.0903 382.0288 313.9487 379.3423 312.2114 377.7749 c311.1392 376.8081 296.4907 367.4009 Y296.9478 366.6519 297.2915 365.8589 297.5278 365.0386 C324.3359 374.3931 325.9355 374.7456 v327.4238 375.0737 328.9844 374.5728 330.0059 373.4399 c330.4922 372.8979 330.834 372.2329 330.9902 371.5171 c331.4941 369.2329 330.0469 366.9644 327.7617 366.4595 c326.1582 366.1079 297.8774 363.1733 Y298.0024 361.7271 297.8101 360.2612 297.2954 358.8901 C319.3271 347.73 320.3311 347.0884 v320.6553 346.8813 320.9502 346.6313 321.2051 346.3462 c322.4746 344.936 322.6504 342.8325 321.627 341.23 c321.0195 340.2749 320.0713 339.6138 318.9658 339.3667 c317.8604 339.1245 316.7256 339.3247 315.7686 339.936 c314.7607 340.5786 295.0542 355.4321 Y294.9419 355.3188 294.8325 355.2007 294.7114 355.0913 c294.394 354.8071 294.0591 354.5591 293.7178 354.3247 C300.8208 342.9624 312.605 324.1147 312.856 323.6294 c313.9194 321.5444 313.0933 318.9829 311.0112 317.9175 cf292.8906 357.1138 m295.7642 359.6997 295.9946 364.1411 293.4092 367.0142 c290.8203 369.8882 286.3774 370.1196 283.5059 367.5337 c280.6318 364.9448 280.3989 360.5024 282.9888 357.6284 c285.5747 354.7554 290.0171 354.5249 292.8906 357.1138 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.005219 0.155917 0.92462 0 1 0.831373 0 Xa 0.005219 0.155917 0.92462 0 1 0.831373 0 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR48.6504 332.7329 m46.3516 336.7056 47.7051 341.8091 51.6826 344.1157 c52.6035 344.6489 76.3633 353.7056 100.375 364.5669 C99.6201 366.0815 99.0527 367.6714 98.7246 369.3052 C10.9805 363.5806 8.32813 363.5806 v6.10352 363.5806 4.01367 364.4478 2.44092 366.02 c0.865234 367.5952 0 369.6841 0 371.9067 c0.00293 374.1333 0.866699 376.2241 2.44141 377.7993 c4.01367 379.3706 6.10742 380.2368 8.33008 380.2378 c10.9688 380.2339 98.5488 375.7808 Y98.8379 377.8257 99.4492 379.8325 100.3984 381.7134 C64.2363 410.1108 62.5146 411.6421 v60.8516 413.1177 59.8682 415.1567 59.7373 417.3765 c59.6035 419.5962 60.3496 421.7349 61.8252 423.397 c61.9395 423.522 62.0488 423.6431 62.1641 423.7593 c65.2773 426.8716 70.2949 427.0142 73.584 424.0903 c75.2871 422.5718 105.7188 388.1626 Y107.0654 389.2134 108.5156 390.062 110.0449 390.6978 C83.7744 461.8501 82.9336 464.9302 v82.1504 467.8071 82.9746 470.9019 85.085 473.0122 c86.1055 474.0317 87.3828 474.772 88.7842 475.1528 c90.9316 475.7358 93.1777 475.4507 95.1055 474.3452 c97.0391 473.2388 98.4219 471.4478 99.0078 469.3013 c99.8418 466.2261 113.7188 391.8247 Y114.5176 391.981 115.3281 392.0679 116.1387 392.1206 C113.6758 414.019 110.0117 446.8101 110.0117 448.4546 c110.0127 453.0474 113.7451 456.7856 118.3369 456.7856 c122.9287 456.7856 126.6641 453.0493 126.6641 448.4575 c126.6621 446.811 122.9766 413.7974 120.5098 391.896 C120.8691 391.8364 121.2324 391.7925 121.5879 391.7153 C144.4683 460.8423 145.5073 463.3569 v145.9292 464.3813 146.5366 465.2974 147.3145 466.0737 c149.7012 468.4595 153.2578 469.1743 156.376 467.8862 c158.4326 467.0396 160.0381 465.4429 160.8916 463.3911 c161.749 461.3354 161.751 459.0728 160.9053 457.0151 c159.8701 454.4985 127.2339 389.4683 Y128.5522 388.6772 129.8062 387.7358 130.9409 386.6011 c131.2515 386.2915 131.5288 385.9614 131.812 385.6372 C175.3076 421.895 177.7197 423.519 v181.5244 426.0845 186.7119 425.0737 189.2783 421.2661 c191.499 417.9683 191.0771 413.5376 188.2686 410.729 c187.8916 410.353 187.4756 410.0054 187.0283 409.7046 c184.6162 408.0806 134.6401 381.3433 Y135.6831 379.1606 136.2944 376.8237 136.4604 374.4585 C214.9385 380.1587 218.124 380.1616 v220.3486 380.1616 222.4404 379.2935 224.0107 377.7222 c225.5869 376.147 226.4541 374.0581 226.4521 371.8345 c226.4502 369.6079 225.5869 367.5161 224.0166 365.9448 c222.4424 364.3735 220.3486 363.5073 218.126 363.5073 c214.9326 363.5044 136.3433 370.6128 Y136.2222 369.6685 136.0132 368.7368 135.7515 367.8169 C160.5186 360.895 203.0811 348.981 204.0967 348.5864 c208.3799 346.9243 210.5146 342.0903 208.8564 337.811 c207.1982 333.5298 202.3662 331.397 198.0791 333.0571 c197.0693 333.4478 157.5029 353.1567 134.4956 364.6265 C133.8921 363.4048 133.1909 362.2163 132.3101 361.1235 C168.6846 332.5903 170.6787 330.5942 v173.9268 327.3481 173.9287 322.0649 170.6787 318.8169 c167.4346 315.5708 162.1514 315.5728 158.9033 318.8188 c156.8994 320.8247 128.2397 357.3618 Y126.8198 356.3872 125.2979 355.6353 123.7158 355.0845 C146.3413 298.9136 147.1948 295.812 v147.9941 292.9292 147.1694 289.8198 145.0503 287.7007 c144.0405 286.6909 142.7729 285.9546 141.3843 285.5698 c136.9565 284.3511 132.3608 286.9546 131.1401 291.3843 c130.2847 294.4878 120.0967 354.2095 Y117.2715 353.8169 114.3789 354.0435 111.6367 354.9106 C81.873 292.4585 80.7188 290.4214 v80.3457 289.7651 79.8867 289.1636 79.3574 288.6343 c76.7227 285.9995 72.6143 285.439 69.3672 287.2847 c67.4336 288.3784 66.041 290.1655 65.4434 292.3081 c64.8535 294.4507 65.1318 296.6968 66.2305 298.6343 c67.3848 300.6753 104.6328 358.9497 Y104.3975 359.1606 104.1543 359.3638 103.9287 359.5884 c103.3379 360.1802 102.8164 360.811 102.3203 361.4575 C80.7793 346.3657 60.9639 330.2446 60.0371 329.7056 c56.0586 327.4048 50.9541 328.7603 48.6504 332.7329 cf107.7012 363.3618 m113.0664 357.9966 121.8008 357.9966 127.1655 363.3618 c132.5347 368.731 132.5327 377.4644 127.1675 382.8286 c121.7988 388.1968 113.0674 388.1968 107.6982 382.8286 c102.334 377.4644 102.333 368.731 107.7012 363.3618 cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 Xa 0.435187 0 0.883848 0 0.65098 0.807843 0.223529 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR228.1064 277.98 m225.2158 275.9917 221.2451 276.7222 219.251 279.6167 c218.79 280.2866 202.7451 309.4741 193.0439 327.1343 C191.9346 326.4692 190.7549 325.9419 189.5303 325.5952 C196.458 292.9194 196.6162 290.8979 v196.7471 289.2026 196.21 287.5581 195.1045 286.2671 c193.9971 284.9722 192.4561 284.189 190.7607 284.0581 c189.0654 283.9272 187.4189 284.4624 186.126 285.5698 c184.8369 286.6733 184.0518 288.2183 183.917 289.9136 c183.7646 291.9253 184.6045 325.0767 Y183.0283 325.1782 181.4639 325.5239 179.9736 326.1372 C160.4678 296.8901 159.4033 295.4878 v158.376 294.1323 156.8799 293.2612 155.1963 293.0308 c153.5117 292.7983 151.8379 293.2397 150.4824 294.2671 c150.3828 294.3452 150.2832 294.4214 150.1855 294.5034 c147.6309 296.6909 147.2241 300.5073 149.2598 303.189 c150.3164 304.5757 174.7412 329.8091 Y173.8604 330.7739 173.1279 331.8296 172.5518 332.9575 C119.874 308.7183 117.5752 307.896 v115.4292 307.1284 113.0215 307.5737 111.2876 309.0562 c110.4497 309.7749 109.8101 310.7065 109.436 311.7495 c108.8647 313.3521 108.9497 315.0815 109.6772 316.6157 c110.4072 318.1558 111.6914 319.3149 113.291 319.8892 c115.5854 320.7085 171.4756 335.6899 Y171.3096 336.2896 171.1963 336.9019 171.1064 337.5181 C154.5615 334.3433 129.7837 329.6099 128.5308 329.5122 c125.0293 329.2407 121.9585 331.8638 121.687 335.3638 c121.415 338.8647 124.042 341.9331 127.5415 342.2046 c128.7964 342.3013 154.1807 341.4448 171.0186 340.8657 C171.0439 341.1411 171.0557 341.4185 171.0947 341.6958 C142.8228 346.7153 140.8452 347.3599 v140.0386 347.6226 139.3052 348.0298 138.6665 348.5757 c136.7065 350.2554 135.9517 352.9233 136.7485 355.3774 c137.2729 356.9946 138.396 358.314 139.9067 359.0864 c141.4243 359.8618 143.1479 359.9966 144.7661 359.4741 c146.7476 358.8335 172.4717 346.1343 Y172.9971 347.1841 173.6396 348.1958 174.4365 349.1274 c174.6553 349.3833 174.8916 349.6128 175.1201 349.8481 C144.9087 380.855 143.5269 382.5991 v141.3472 385.3472 141.8101 389.3618 144.561 391.5444 c146.9429 393.4292 150.3438 393.3735 152.6504 391.397 c152.9609 391.1304 153.25 390.8364 153.5059 390.5142 c154.8857 388.77 178.2295 352.2612 Y179.8291 353.1821 181.5732 353.7886 183.3662 354.0542 C176.1084 391.2192 175.9189 393.6479 v175.7861 395.3452 176.3232 396.9897 177.4287 398.2788 c178.5361 399.5737 180.0771 400.3589 181.7725 400.4878 c183.4697 400.6187 185.1143 400.0864 186.4053 398.979 c187.6963 397.8755 188.4814 396.3306 188.6143 394.6353 c188.8037 392.2017 186.3057 354.1929 Y187.0342 354.1548 187.7549 354.0522 188.4736 353.9067 C192.2822 373.1958 198.8408 406.3433 199.0811 407.1421 c200.0967 410.5063 203.6533 412.4185 207.0146 411.4087 c210.376 410.3979 212.2881 406.8423 211.2764 403.4771 c211.0381 402.6821 198.3584 371.356 190.9775 353.1392 C191.9443 352.7524 192.8936 352.2866 193.7783 351.6802 C207.1943 373.9331 208.5947 375.5718 v210.8779 378.2388 214.9033 378.5542 217.5732 376.269 c220.2393 373.9878 220.5498 369.9614 218.2686 367.2925 c216.8584 365.646 196.8877 348.8003 Y197.7139 347.7749 198.3779 346.6597 198.8896 345.4868 C236.9697 364.6128 239.2822 365.4497 v241.4307 366.2271 243.8506 365.7847 245.5908 364.2964 c246.4209 363.5854 247.0576 362.6616 247.4307 361.6255 c248.6221 358.3237 246.9111 354.6665 243.6064 353.4731 c241.292 352.6372 199.7705 342.7798 Y200.2393 340.6499 200.2373 338.4321 199.7373 336.2905 C234.6904 323.9604 236.3115 323.1997 v236.833 322.9546 237.3213 322.6411 237.7549 322.2671 c239.9189 320.4155 240.5889 317.3179 239.376 314.7339 c238.6572 313.1958 237.376 312.0269 235.7783 311.4468 c234.1807 310.8706 232.4521 310.9487 230.9111 311.6694 c229.2842 312.4312 197.0732 330.7104 Y196.9287 330.52 196.7861 330.3237 196.6279 330.1362 c196.2119 329.6519 195.7627 329.2173 195.2998 328.8013 C208.0771 313.2739 229.2744 287.5132 229.7393 286.8394 c231.7295 283.9409 230.9971 279.9702 228.1064 277.98 cf193.5283 332.7905 m197.2998 337.1978 196.7822 343.854 192.376 347.6255 c187.9658 351.3999 181.3096 350.8833 177.5381 346.4761 c173.7627 342.0659 174.2803 335.4087 178.6904 331.6343 c183.0986 327.8628 189.7549 328.3804 193.5283 332.7905 cf*U%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(New Pattern 90)0 Au1 Ap0 J 0 j 1 w 4 M []0 d0 XR-6711 7471 m-6711 7445.6797 L-6685.6802 7445.6797 L-6685.6802 7471 L-6711 7471 Ln0 Ap0 R0.688106 0.654719 0.288518 0.125948 0.380392 0.345098 0.490196 XA-6685.6802 7445.6797 m-6710.9985 7445.6797 LS-6685.6802 7449.3848 m-6710.9985 7449.3848 LS-6710.9985 7456.7964 m-6685.6802 7456.7964 LS-6685.6802 7453.0918 m-6710.9985 7453.0918 LS-6710.9985 7460.5024 m-6685.6802 7460.5024 LSU%AI8_EndBrushPattern%AI8_BeginBrushPattern(New Pattern 91)0 Au1 Ap1 J 0 j 1 w 4 M []0 d0 XR-6685.1807 7470.4165 m-6685.1807 7445.0957 L-6710.5 7445.0957 L-6710.5 7470.4165 L-6685.1807 7470.4165 Ln0 Ap0 R0.688106 0.654719 0.288518 0.125948 0.380392 0.345098 0.490196 XA-6684.9585 7445.0957 m-6691.0479 7445.0957 L-6701.7344 7445.0957 -6710.4082 7453.7148 -6710.5 7464.3789 C-6710.5 7470.5 LS-6685.1782 7448.8008 m-6691.0479 7448.8008 L-6699.7446 7448.8008 -6706.7954 7455.8535 -6706.7954 7464.5488 C-6706.7954 7470.4165 LS-6685.1782 7452.5078 m-6691.0479 7452.5078 L-6697.6992 7452.5078 -6703.0898 7457.8984 -6703.0898 7464.5488 C-6703.0898 7470.4165 LS-6685.1782 7456.2124 m-6691.0479 7456.2124 L-6695.6519 7456.2124 -6699.3848 7459.9453 -6699.3848 7464.5488 C-6699.3848 7470.4165 LS-6695.6802 7470.4165 m-6695.6802 7464.5488 L-6695.6802 7461.9917 -6693.6064 7459.918 -6691.0479 7459.918 C-6685.1782 7459.918 LSU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 3)0 Au0 J 0 j 1 w 10 M []0 d0 XR-6711 7471 m-6681.6796 7471 L-6681.6796 7441.6796 L-6711 7441.6796 L-6711 7471 Lnuq-6681.6796 7441.6797 m-6711 7441.6797 l-6681.6796 7471 l-6681.6796 7441.6797 lhWn0 R0.688106 0.654719 0.288518 0.125948 0.380392 0.345098 0.490196 XA4 M-6709 7469 m-6683.6812 7469 LS-6709 7465.2949 m-6683.6812 7465.2949 LS-6683.6812 7457.8833 m-6709 7457.8833 LS-6709 7461.5879 m-6683.6812 7461.5879 LS-6683.6812 7454.1773 m-6709 7454.1773 LSQ0 Aq0 J 0 j 1 w 10 M []0 d0 XR-6711 7471 m-6711 7441.6796 l-6681.6797 7471 l-6711 7471 lhWn0 R0.688106 0.654719 0.288518 0.125948 0.380392 0.345098 0.490196 XA4 M-6683.6797 7469 m-6683.6797 7443.6812 LS-6687.3848 7469 m-6687.3848 7443.6812 LS-6694.7964 7443.6812 m-6694.7964 7469 LS-6691.0918 7469 m-6691.0918 7443.6812 LS-6698.5024 7443.6812 m-6698.5024 7469 LSQUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Calligraphi) -(c Brush Tool/ 10 pt. Round/ Adobe Calligraphic Brush Tool/ 5 p) -(t. Flat/ Adobe Calligraphic Brush Tool/ Touch Calligraphic Bru) -(sh/ Adobe PatternOnPath Brush Tool/ Multilines/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt. Round)(1 10 10 100 100 0 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Touch Calligraphic Brush)(1 12 12 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.911711 0.786862 0.619532 0.974487 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.911711 0.786862 0.619532 0.974487 0 0 0 Xa(Black)Pc0 0.947417 0.9122 0 1 0 0 Xa(RGB Red)Pc0.095491 0 0.952239 0 1 1 0 Xa(RGB Yellow)Pc0.647517 0 1 0 0 1 0 Xa(RGB Green)Pc0.569543 0 0.153536 0 0 1 1 Xa(RGB Cyan)Pc0.933257 0.745968 0 0 0 0 1 Xa(RGB Blue)Pc0.4112 0.777737 0 0 1 0 1 Xa(RGB Magenta)Pc0.168734 0.949279 0.821378 0.06894 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.751736 0.888853 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501274 0.908873 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.36582 0.818448 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.06714 0 0.852934 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.233005 0 0.890867 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.524651 0 0.878508 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.717311 0 0.876371 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.842466 0.143984 0.926299 0.021576 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.897978 0.323857 0.926238 0.248203 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.736751 0 0.689906 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.765469 0.044648 0.451087 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.71014 0.130922 0.00177 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.866697 0.492561 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.975952 0.895476 0 0.000855 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 0.968475 0.323766 0.220218 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.756069 0.923705 0 0.000031 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.540429 0.929442 0 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.324895 1 0.236545 0.167269 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.098909 0.982696 0.408087 0.020935 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.933593 0.144961 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.220462 0.272618 0.388739 0.061189 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.354864 0.386358 0.466438 0.211795 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.445869 0.470863 0.527184 0.380529 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.534539 0.543023 0.552666 0.54226 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.204105 0.377295 0.594751 0.084779 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.279973 0.462196 0.67068 0.207187 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.324773 0.536522 0.7608 0.329229 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.359655 0.604791 0.857969 0.451484 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.391241 0.683345 0.943328 0.57113 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.474342 0.746395 0.824887 0.730831 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(White, Black)PcBb2 (Fade To Center Green) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Fade To Center Green)PcBb2 (Purple, Orange) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Purple, Orange)Pc(Bugaboo) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Bugaboo)Pc0.911711 0.786862 0.619532 0.974487 0 0 0 Xa(R=0 G=0 B=0)Pc0.762295 0.667903 0.606867 0.828611 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.690333 0.595453 0.560021 0.655329 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.62002 0.523888 0.504051 0.47776 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.559869 0.453986 0.448859 0.326848 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.492012 0.386114 0.384894 0.202182 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.411383 0.320134 0.324315 0.110109 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.325963 0.244572 0.255253 0.043549 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.232029 0.170626 0.181155 0.008301 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.115602 0.081605 0.091798 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.062074 0.042573 0.051759 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.54519 0.148348 1 0.017578 0.533333 0.658824 0.05098 Xa(R=136 G=168 B=13)Pc0.741909 0.762966 0 0 0.498039 0.278431 0.866667 Xa(R=127 G=71 B=221)Pc0 0.369757 0.913725 0 0.984314 0.682353 0.090196 Xa(R=251 G=174 B=23)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au*u1 D0 O0.941649 0.851194 0.511131 0.726406 0.086275 0.090196 0.14902 Xa0 J 0 j 1 w 10 M []0 d0 XR643.4552 -671.623 m620.4665 -650.8969 591.0733 -640.5338 555.2723 -640.5338 c516.834 -640.5338 484.142 -654.6655 457.1979 -682.9291 c430.2523 -711.1926 416.7803 -747.1818 416.7803 -790.8951 c416.7803 -834.9865 430.2523 -871.0707 457.1979 -899.1459 c484.142 -927.2213 516.834 -941.2581 555.2723 -941.2581 c591.0733 -941.2581 620.4665 -930.895 643.4552 -910.1688 C643.4552 -932.7793 L733.8989 -932.7793 L733.8989 -497.5182 L643.4552 -497.5182 L643.4552 -671.623 Lf0 D622.8223 -843.7485 m609.0671 -857.5037 592.7693 -864.3813 573.9259 -864.3813 c553.9528 -864.3813 537.5602 -857.5986 524.7479 -844.0317 c511.934 -830.4647 505.5279 -812.7525 505.5279 -790.8951 c505.5279 -769.4158 511.934 -751.7969 524.7479 -738.0433 c537.5602 -724.2881 553.9528 -717.4105 573.9259 -717.4105 c592.7693 -717.4105 609.0671 -724.3815 622.8223 -738.325 c636.5776 -752.2684 643.4552 -769.7924 643.4552 -790.8951 c643.4552 -812.376 636.5776 -829.9932 622.8223 -843.7485 cf*U*u1 D994.2973 -671.623 m971.3086 -650.8969 941.9154 -640.5338 906.1144 -640.5338 c867.6761 -640.5338 834.9841 -654.6655 808.04 -682.9291 c781.0944 -711.1926 767.6224 -747.1818 767.6224 -790.8951 c767.6224 -834.9865 781.0944 -871.0707 808.04 -899.1459 c834.9841 -927.2213 867.6761 -941.2581 906.1144 -941.2581 c941.9154 -941.2581 971.3086 -930.895 994.2973 -910.1688 C994.2973 -932.7793 L1084.741 -932.7793 L1084.741 -497.5182 L994.2973 -497.5182 L994.2973 -671.623 Lf0 D973.6644 -843.7485 m959.9092 -857.5037 943.6115 -864.3813 924.768 -864.3813 c904.7949 -864.3813 888.4023 -857.5986 875.59 -844.0317 c862.7761 -830.4647 856.37 -812.7525 856.37 -790.8951 c856.37 -769.4158 862.7761 -751.7969 875.59 -738.0433 c888.4023 -724.2881 904.7949 -717.4105 924.768 -717.4105 c943.6115 -717.4105 959.9092 -724.3815 973.6644 -738.325 c987.4197 -752.2684 994.2973 -769.7924 994.2973 -790.8951 c994.2973 -812.376 987.4197 -829.9932 973.6644 -843.7485 cf*U1323.85 -780.7203 m1323.85 -807.4777 1318.6669 -827.3558 1308.3037 -840.3579 c1297.9407 -853.3585 1283.5256 -859.8596 1265.0603 -859.8596 c1250.7402 -859.8596 1239.0576 -854.678 1230.0142 -844.3133 c1220.969 -833.9502 1216.4473 -820.4782 1216.4473 -803.8972 C1216.4473 -649.0125 L1126.5684 -649.0125 L1126.5684 -823.1156 L1126.5684 -858.54 1136.6498 -887.0868 1156.8112 -908.7559 c1176.9724 -930.4235 1203.635 -941.2581 1236.7969 -941.2581 c1272.2212 -941.2581 1301.2378 -929.3872 1323.85 -905.6454 C1323.85 -932.7793 L1414.2921 -932.7793 L1414.2921 -649.0125 L1323.85 -649.0125 L1323.85 -780.7203 Lf1547.2261 -703.2787 m1547.2261 -649.0125 L1456.7823 -649.0125 L1456.7823 -932.7793 L1547.2261 -932.7793 L1547.2261 -844.0317 L1547.2261 -773.1845 1579.8247 -737.7601 1645.0189 -737.7601 C1661.4132 -737.7601 L1665.3685 -647.3164 L1659.3406 -645.8086 1652.5563 -645.0555 1645.0189 -645.0555 c1603.1899 -645.0555 1570.5913 -664.4622 1547.2261 -703.2787 Cf*u1 D2173.0344 -683.4939 m2142.8882 -655.6069 2106.1443 -641.6634 2062.8059 -641.6634 c2018.7146 -641.6634 1981.5007 -655.6069 1951.1646 -683.4939 c1950.5474 -684.0612 1949.9468 -684.637 1949.3422 -685.2108 C1948.7413 -684.637 1948.1443 -684.0612 1947.531 -683.4939 c1917.3848 -655.6069 1880.6409 -641.6634 1837.3025 -641.6634 c1793.2112 -641.6634 1755.9973 -655.6069 1725.6611 -683.4939 c1695.325 -711.3809 1680.1569 -747.1818 1680.1569 -790.8951 c1680.1569 -834.9865 1695.325 -870.9757 1725.6611 -898.8627 c1755.9973 -926.7498 1793.2112 -940.6932 1837.3025 -940.6932 c1880.6409 -940.6932 1917.3848 -926.7498 1947.531 -898.8627 c1948.1443 -898.2955 1948.7413 -897.7194 1949.3422 -897.1454 C1949.9468 -897.7194 1950.5474 -898.2955 1951.1646 -898.8627 c1981.5007 -926.7498 2018.7146 -940.6932 2062.8059 -940.6932 c2106.1443 -940.6932 2142.8882 -926.7498 2173.0344 -898.8627 c2203.1841 -870.9757 2218.2554 -834.9865 2218.2554 -790.8951 c2218.2554 -747.1818 2203.1841 -711.3809 2173.0344 -683.4939 cf0 D1837.3025 -864.3813 m1818.0825 -864.3813 1801.595 -857.5037 1787.8429 -843.7485 c1774.0876 -829.9932 1767.21 -812.376 1767.21 -790.8951 c1767.21 -769.4158 1774.1809 -751.7969 1788.1228 -738.0433 c1802.068 -724.2881 1818.459 -717.4105 1837.3025 -717.4105 c1855.3928 -717.4105 1871.314 -724.2881 1885.0693 -738.0433 c1898.5344 -751.5068 1905.3909 -768.6844 1905.6749 -789.551 c1905.6716 -789.9999 1905.6603 -790.4445 1905.6603 -790.8951 c1905.6603 -791.3511 1905.6718 -791.801 1905.675 -792.2553 c1905.3915 -813.1163 1898.6282 -830.2869 1885.3525 -843.7485 c1871.7839 -857.5037 1855.7694 -864.3813 1837.3025 -864.3813 cf2110.856 -843.7485 m2097.2874 -857.5037 2081.2729 -864.3813 2062.8059 -864.3813 c2043.5859 -864.3813 2027.0984 -857.5037 2013.3463 -843.7485 c1999.8602 -830.2624 1993.0027 -813.0543 1992.7388 -792.142 c1992.7415 -791.7254 1992.7521 -791.3131 1992.7521 -790.8951 c1992.7521 -790.4818 1992.7415 -790.074 1992.7388 -789.6622 c1993.0032 -768.7451 1999.9541 -751.5308 2013.6262 -738.0433 c2027.5714 -724.2881 2043.9624 -717.4105 2062.8059 -717.4105 c2080.8962 -717.4105 2096.8174 -724.2881 2110.5728 -738.0433 c2124.3279 -751.7969 2131.2056 -769.4158 2131.2056 -790.8951 c2131.2056 -812.376 2124.4214 -829.9932 2110.856 -843.7485 cf*U2512.7571 -673.0359 m2492.5974 -651.3667 2465.9365 -640.5338 2432.7715 -640.5338 c2397.3503 -640.5338 2368.3306 -652.403 2345.7214 -676.1448 C2345.7214 -649.0125 L2255.2761 -649.0125 L2255.2761 -932.7793 L2345.7214 -932.7793 L2345.7214 -801.0699 L2345.7214 -774.3141 2350.9031 -754.436 2361.2661 -741.4339 c2371.6294 -728.4333 2386.0442 -721.9323 2404.5078 -721.9323 c2418.8296 -721.9323 2430.5122 -727.1138 2439.5557 -737.4769 c2448.5994 -747.84 2453.1211 -761.312 2453.1211 -777.8946 C2453.1211 -932.7793 L2543 -932.7793 L2543 -758.6746 L2543 -723.2518 2532.9202 -694.705 2512.7571 -673.0359 cfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF